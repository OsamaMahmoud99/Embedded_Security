
test_aes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d54  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004e90  08004e90  00014e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  20000004  08004fc4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003ac  20000020  08004fe0  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003cc  08004fe0  000203cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012400  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002530  00000000  00000000  00032450  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000015a8  00000000  00000000  00034980  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001490  00000000  00000000  00035f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00021411  00000000  00000000  000373b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d669  00000000  00000000  000587c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d5441  00000000  00000000  00065e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0013b273  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005b2c  00000000  00000000  0013b2f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08004e78 	.word	0x08004e78

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08004e78 	.word	0x08004e78

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	4688      	mov	r8, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0803 	orr.w	r8, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e4:	fa1f fc85 	uxth.w	ip, r5
 80001e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f0:	fb07 f10c 	mul.w	r1, r7, ip
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80001fe:	f080 811b 	bcs.w	8000438 <__udivmoddi4+0x28c>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8118 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000220:	45a4      	cmp	ip, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	192c      	adds	r4, r5, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8107 	bcs.w	800043c <__udivmoddi4+0x290>
 800022e:	45a4      	cmp	ip, r4
 8000230:	f240 8104 	bls.w	800043c <__udivmoddi4+0x290>
 8000234:	3802      	subs	r0, #2
 8000236:	442c      	add	r4, r5
 8000238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023c:	eba4 040c 	sub.w	r4, r4, ip
 8000240:	2700      	movs	r7, #0
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80eb 	beq.w	8000432 <__udivmoddi4+0x286>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d147      	bne.n	8000302 <__udivmoddi4+0x156>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fa 	bhi.w	8000470 <__udivmoddi4+0x2c4>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	1b49      	subs	r1, r1, r5
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	fa1f f885 	uxth.w	r8, r5
 80002a8:	2701      	movs	r7, #1
 80002aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	fb08 f10c 	mul.w	r1, r8, ip
 80002bc:	4299      	cmp	r1, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002c0:	18eb      	adds	r3, r5, r3
 80002c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4299      	cmp	r1, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002ce:	4684      	mov	ip, r0
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e0:	fb08 f800 	mul.w	r8, r8, r0
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x14c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x14a>
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	f200 80b6 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	eba4 0408 	sub.w	r4, r4, r8
 80002fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000300:	e79f      	b.n	8000242 <__udivmoddi4+0x96>
 8000302:	f1c7 0c20 	rsb	ip, r7, #32
 8000306:	40bb      	lsls	r3, r7
 8000308:	fa22 fe0c 	lsr.w	lr, r2, ip
 800030c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000310:	fa01 f407 	lsl.w	r4, r1, r7
 8000314:	fa20 f50c 	lsr.w	r5, r0, ip
 8000318:	fa21 f30c 	lsr.w	r3, r1, ip
 800031c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000320:	4325      	orrs	r5, r4
 8000322:	fbb3 f9f8 	udiv	r9, r3, r8
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	fb08 3319 	mls	r3, r8, r9, r3
 800032c:	fa1f fa8e 	uxth.w	sl, lr
 8000330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000334:	fb09 f40a 	mul.w	r4, r9, sl
 8000338:	429c      	cmp	r4, r3
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f107 	lsl.w	r1, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1e 0303 	adds.w	r3, lr, r3
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8087 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000350:	429c      	cmp	r4, r3
 8000352:	f240 8084 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4473      	add	r3, lr
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	b2ad      	uxth	r5, r5
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800036c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000370:	45a2      	cmp	sl, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1e 0404 	adds.w	r4, lr, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	d26b      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 800037e:	45a2      	cmp	sl, r4
 8000380:	d969      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000382:	3802      	subs	r0, #2
 8000384:	4474      	add	r4, lr
 8000386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038a:	fba0 8902 	umull	r8, r9, r0, r2
 800038e:	eba4 040a 	sub.w	r4, r4, sl
 8000392:	454c      	cmp	r4, r9
 8000394:	46c2      	mov	sl, r8
 8000396:	464b      	mov	r3, r9
 8000398:	d354      	bcc.n	8000444 <__udivmoddi4+0x298>
 800039a:	d051      	beq.n	8000440 <__udivmoddi4+0x294>
 800039c:	2e00      	cmp	r6, #0
 800039e:	d069      	beq.n	8000474 <__udivmoddi4+0x2c8>
 80003a0:	ebb1 050a 	subs.w	r5, r1, sl
 80003a4:	eb64 0403 	sbc.w	r4, r4, r3
 80003a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003ac:	40fd      	lsrs	r5, r7
 80003ae:	40fc      	lsrs	r4, r7
 80003b0:	ea4c 0505 	orr.w	r5, ip, r5
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f703 	lsr.w	r7, r0, r3
 80003c4:	4095      	lsls	r5, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	fa21 f303 	lsr.w	r3, r1, r3
 80003ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d2:	4338      	orrs	r0, r7
 80003d4:	0c01      	lsrs	r1, r0, #16
 80003d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003da:	fa1f f885 	uxth.w	r8, r5
 80003de:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e6:	fb07 f308 	mul.w	r3, r7, r8
 80003ea:	428b      	cmp	r3, r1
 80003ec:	fa04 f402 	lsl.w	r4, r4, r2
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f2:	1869      	adds	r1, r5, r1
 80003f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3f02      	subs	r7, #2
 8000400:	4429      	add	r1, r5
 8000402:	1acb      	subs	r3, r1, r3
 8000404:	b281      	uxth	r1, r0
 8000406:	fbb3 f0fe 	udiv	r0, r3, lr
 800040a:	fb0e 3310 	mls	r3, lr, r0, r3
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb00 f308 	mul.w	r3, r0, r8
 8000416:	428b      	cmp	r3, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000420:	d217      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000422:	428b      	cmp	r3, r1
 8000424:	d915      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000430:	e73b      	b.n	80002aa <__udivmoddi4+0xfe>
 8000432:	4637      	mov	r7, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e709      	b.n	800024c <__udivmoddi4+0xa0>
 8000438:	4607      	mov	r7, r0
 800043a:	e6e7      	b.n	800020c <__udivmoddi4+0x60>
 800043c:	4618      	mov	r0, r3
 800043e:	e6fb      	b.n	8000238 <__udivmoddi4+0x8c>
 8000440:	4541      	cmp	r1, r8
 8000442:	d2ab      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000444:	ebb8 0a02 	subs.w	sl, r8, r2
 8000448:	eb69 020e 	sbc.w	r2, r9, lr
 800044c:	3801      	subs	r0, #1
 800044e:	4613      	mov	r3, r2
 8000450:	e7a4      	b.n	800039c <__udivmoddi4+0x1f0>
 8000452:	4660      	mov	r0, ip
 8000454:	e7e9      	b.n	800042a <__udivmoddi4+0x27e>
 8000456:	4618      	mov	r0, r3
 8000458:	e795      	b.n	8000386 <__udivmoddi4+0x1da>
 800045a:	4667      	mov	r7, ip
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	4681      	mov	r9, r0
 8000460:	e77c      	b.n	800035c <__udivmoddi4+0x1b0>
 8000462:	3802      	subs	r0, #2
 8000464:	442c      	add	r4, r5
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0x14c>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	442b      	add	r3, r5
 800046e:	e72f      	b.n	80002d0 <__udivmoddi4+0x124>
 8000470:	4638      	mov	r0, r7
 8000472:	e708      	b.n	8000286 <__udivmoddi4+0xda>
 8000474:	4637      	mov	r7, r6
 8000476:	e6e9      	b.n	800024c <__udivmoddi4+0xa0>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004cc:	68fb      	ldr	r3, [r7, #12]
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
	...

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fc07 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f84d 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f98f 	bl	800080c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004ee:	f000 f917 	bl	8000720 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80004f2:	f000 f963 	bl	80007bc <MX_USB_PCD_Init>
  MX_AES1_Init();
 80004f6:	f000 f8eb 	bl	80006d0 <MX_AES1_Init>
  /* USER CODE BEGIN 2 */
  HAL_SYSTICK_Config(0xFFFFFFFF);
 80004fa:	f04f 30ff 	mov.w	r0, #4294967295
 80004fe:	f000 fd56 	bl	8000fae <HAL_SYSTICK_Config>
  TIME_MEASURE_START;
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <main+0x88>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	4a18      	ldr	r2, [pc, #96]	; (8000568 <main+0x8c>)
 8000508:	6013      	str	r3, [r2, #0]
  HAL_CRYP_Encrypt(&hcryp1, input_data, 4, encrypted_data, 1000);
 800050a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <main+0x90>)
 8000512:	2204      	movs	r2, #4
 8000514:	4916      	ldr	r1, [pc, #88]	; (8000570 <main+0x94>)
 8000516:	4817      	ldr	r0, [pc, #92]	; (8000574 <main+0x98>)
 8000518:	f000 fd90 	bl	800103c <HAL_CRYP_Encrypt>
  TIME_MEASURE_STOP;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <main+0x88>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4a15      	ldr	r2, [pc, #84]	; (8000578 <main+0x9c>)
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <main+0x8c>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <main+0x9c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	4a13      	ldr	r2, [pc, #76]	; (800057c <main+0xa0>)
 8000530:	6013      	str	r3, [r2, #0]

  TIME_MEASURE_START;
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <main+0x88>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <main+0x8c>)
 8000538:	6013      	str	r3, [r2, #0]
  HAL_CRYP_Decrypt(&hcryp1, encrypted_data, 4, decrypted_data, 1000);
 800053a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <main+0xa4>)
 8000542:	2204      	movs	r2, #4
 8000544:	4909      	ldr	r1, [pc, #36]	; (800056c <main+0x90>)
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0x98>)
 8000548:	f000 fe08 	bl	800115c <HAL_CRYP_Decrypt>
  TIME_MEASURE_STOP;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <main+0x88>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <main+0x9c>)
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <main+0x8c>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <main+0x9c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <main+0xa0>)
 8000560:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x86>
 8000564:	e000e010 	.word	0xe000e010
 8000568:	2000014c 	.word	0x2000014c
 800056c:	2000013c 	.word	0x2000013c
 8000570:	20000004 	.word	0x20000004
 8000574:	200000dc 	.word	0x200000dc
 8000578:	20000150 	.word	0x20000150
 800057c:	2000004c 	.word	0x2000004c
 8000580:	2000003c 	.word	0x2000003c

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0ae      	sub	sp, #184	; 0xb8
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800058e:	2248      	movs	r2, #72	; 0x48
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fc68 	bl	8004e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
 80005a8:	615a      	str	r2, [r3, #20]
 80005aa:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2250      	movs	r2, #80	; 0x50
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fc58 	bl	8004e68 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80005b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005c6:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	f023 0303 	bic.w	r3, r3, #3
 80005d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005dc:	f002 f8a6 	bl	800272c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f7ff ff4b 	bl	800047c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <SystemClock_Config+0x148>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005ee:	4a37      	ldr	r2, [pc, #220]	; (80006cc <SystemClock_Config+0x148>)
 80005f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	4b35      	ldr	r3, [pc, #212]	; (80006cc <SystemClock_Config+0x148>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000602:	2327      	movs	r3, #39	; 0x27
 8000604:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000614:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2340      	movs	r3, #64	; 0x40
 800061e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000622:	2300      	movs	r3, #0
 8000624:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000628:	2360      	movs	r3, #96	; 0x60
 800062a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fc29 	bl	8002e90 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000644:	f000 f92a 	bl	800089c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000648:	236f      	movs	r3, #111	; 0x6f
 800064a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800064c:	2302      	movs	r3, #2
 800064e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f002 ffa4 	bl	80035b8 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000676:	f000 f911 	bl	800089c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800067a:	f242 1301 	movw	r3, #8449	; 0x2101
 800067e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000680:	2318      	movs	r3, #24
 8000682:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000688:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800068a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800068e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000690:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000694:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800069a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006a4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80006a6:	2300      	movs	r3, #0
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fbcb 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x13c>
  {
    Error_Handler();
 80006bc:	f000 f8ee 	bl	800089c <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c0:	f003 fd39 	bl	8004136 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c4:	bf00      	nop
 80006c6:	37b8      	adds	r7, #184	; 0xb8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	58000400 	.word	0x58000400

080006d0 <MX_AES1_Init>:
  * @brief AES1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_AES1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END AES1_Init 0 */

  /* USER CODE BEGIN AES1_Init 1 */

  /* USER CODE END AES1_Init 1 */
  hcryp1.Instance = AES1;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_AES1_Init+0x44>)
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <MX_AES1_Init+0x48>)
 80006d8:	601a      	str	r2, [r3, #0]
  hcryp1.Init.DataType = CRYP_DATATYPE_32B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_AES1_Init+0x44>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hcryp1.Init.KeySize = CRYP_KEYSIZE_256B;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_AES1_Init+0x44>)
 80006e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80006e6:	609a      	str	r2, [r3, #8]
  hcryp1.Init.pKey = (uint32_t *)pKeyAES1;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <MX_AES1_Init+0x44>)
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <MX_AES1_Init+0x4c>)
 80006ec:	60da      	str	r2, [r3, #12]
  hcryp1.Init.Algorithm = CRYP_AES_ECB;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_AES1_Init+0x44>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hcryp1.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_AES1_Init+0x44>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp1.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_AES1_Init+0x44>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_AES1_Init+0x44>)
 8000702:	f000 fc60 	bl	8000fc6 <HAL_CRYP_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_AES1_Init+0x40>
  {
    Error_Handler();
 800070c:	f000 f8c6 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN AES1_Init 2 */

  /* USER CODE END AES1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000dc 	.word	0x200000dc
 8000718:	50060000 	.word	0x50060000
 800071c:	08004edc 	.word	0x08004edc

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000726:	4a24      	ldr	r2, [pc, #144]	; (80007b8 <MX_USART1_UART_Init+0x98>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072a:	4b22      	ldr	r3, [pc, #136]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000732:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000738:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073a:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000748:	220c      	movs	r2, #12
 800074a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4812      	ldr	r0, [pc, #72]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800076c:	f003 fe1a 	bl	80043a4 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000776:	f000 f891 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 800077e:	f004 fa12 	bl	8004ba6 <HAL_UARTEx_SetTxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000788:	f000 f888 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	2100      	movs	r1, #0
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 8000790:	f004 fa47 	bl	8004c22 <HAL_UARTEx_SetRxFifoThreshold>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800079a:	f000 f87f 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART1_UART_Init+0x94>)
 80007a0:	f004 f9c8 	bl	8004b34 <HAL_UARTEx_DisableFifoMode>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80007aa:	f000 f877 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000050 	.word	0x20000050
 80007b8:	40013800 	.word	0x40013800

080007bc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_USB_PCD_Init+0x4c>)
 80007c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007c8:	2208      	movs	r2, #8
 80007ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007ce:	2202      	movs	r2, #2
 80007d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_USB_PCD_Init+0x48>)
 80007f2:	f001 feb5 	bl	8002560 <HAL_PCD_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007fc:	f000 f84e 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000154 	.word	0x20000154
 8000808:	40006800 	.word	0x40006800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000820:	2004      	movs	r0, #4
 8000822:	f7ff fe41 	bl	80004a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2002      	movs	r0, #2
 8000828:	f7ff fe3e 	bl	80004a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fe3b 	bl	80004a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2008      	movs	r0, #8
 8000834:	f7ff fe38 	bl	80004a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	2123      	movs	r1, #35	; 0x23
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <MX_GPIO_Init+0x84>)
 800083e:	f001 fe77 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	2310      	movs	r3, #16
 8000844:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4810      	ldr	r0, [pc, #64]	; (8000894 <MX_GPIO_Init+0x88>)
 8000854:	f001 fcfc 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000858:	2323      	movs	r3, #35	; 0x23
 800085a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	4619      	mov	r1, r3
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <MX_GPIO_Init+0x84>)
 800086e:	f001 fcef 	bl	8002250 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000872:	2303      	movs	r3, #3
 8000874:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0x8c>)
 8000884:	f001 fce4 	bl	8002250 <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	48000400 	.word	0x48000400
 8000894:	48000800 	.word	0x48000800
 8000898:	48000c00 	.word	0x48000c00

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <LL_AHB2_GRP1_EnableClock>:
{
 80008aa:	b480      	push	{r7}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4313      	orrs	r3, r2
 80008c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4013      	ands	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ce:	68fb      	ldr	r3, [r7, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000900:	68fb      	ldr	r3, [r7, #12]
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800090e:	b480      	push	{r7}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800091a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800091c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4313      	orrs	r3, r2
 8000924:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4013      	ands	r3, r2
 8000930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <HAL_CRYP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcryp: CRYP handle pointer
* @retval None
*/
void HAL_CRYP_MspInit(CRYP_HandleTypeDef* hcryp)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if(hcryp->Instance==AES1)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a05      	ldr	r2, [pc, #20]	; (8000974 <HAL_CRYP_MspInit+0x24>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d103      	bne.n	800096a <HAL_CRYP_MspInit+0x1a>
  {
  /* USER CODE BEGIN AES1_MspInit 0 */

  /* USER CODE END AES1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_AES1_CLK_ENABLE();
 8000962:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000966:	f7ff ffa0 	bl	80008aa <LL_AHB2_GRP1_EnableClock>
  /* USER CODE BEGIN AES1_MspInit 1 */

  /* USER CODE END AES1_MspInit 1 */
  }

}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	50060000 	.word	0x50060000

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <HAL_UART_MspInit+0x58>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d116      	bne.n	80009c8 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800099a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800099e:	f7ff ffb6 	bl	800090e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff ff81 	bl	80008aa <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80009a8:	23c0      	movs	r3, #192	; 0xc0
 80009aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b8:	2307      	movs	r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <HAL_UART_MspInit+0x5c>)
 80009c4:	f001 fc44 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3720      	adds	r7, #32
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40013800 	.word	0x40013800
 80009d4:	48000400 	.word	0x48000400

080009d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_PCD_MspInit+0x5c>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d118      	bne.n	8000a2c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff ff55 	bl	80008aa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a12:	230a      	movs	r3, #10
 8000a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a20:	f001 fc16 	bl	8002250 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a24:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000a28:	f7ff ff58 	bl	80008dc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40006800 	.word	0x40006800

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f98c 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000a98:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <SystemInit+0xa0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000a9e:	4b25      	ldr	r3, [pc, #148]	; (8000b34 <SystemInit+0xa0>)
 8000aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa4:	4a23      	ldr	r2, [pc, #140]	; (8000b34 <SystemInit+0xa0>)
 8000aa6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aaa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ac6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <SystemInit+0xa4>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ae4:	f023 0305 	bic.w	r3, r3, #5
 8000ae8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000af8:	f023 0301 	bic.w	r3, r3, #1
 8000afc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <SystemInit+0xa8>)
 8000b06:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b0c:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <SystemInit+0xa8>)
 8000b0e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00
 8000b38:	faf6fefb 	.word	0xfaf6fefb
 8000b3c:	22041000 	.word	0x22041000

08000b40 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	091b      	lsrs	r3, r3, #4
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	4a47      	ldr	r2, [pc, #284]	; (8000c70 <SystemCoreClockUpdate+0x130>)
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	f003 030c 	and.w	r3, r3, #12
 8000b64:	2b0c      	cmp	r3, #12
 8000b66:	d867      	bhi.n	8000c38 <SystemCoreClockUpdate+0xf8>
 8000b68:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <SystemCoreClockUpdate+0x30>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000ba5 	.word	0x08000ba5
 8000b74:	08000c39 	.word	0x08000c39
 8000b78:	08000c39 	.word	0x08000c39
 8000b7c:	08000c39 	.word	0x08000c39
 8000b80:	08000bad 	.word	0x08000bad
 8000b84:	08000c39 	.word	0x08000c39
 8000b88:	08000c39 	.word	0x08000c39
 8000b8c:	08000c39 	.word	0x08000c39
 8000b90:	08000bb5 	.word	0x08000bb5
 8000b94:	08000c39 	.word	0x08000c39
 8000b98:	08000c39 	.word	0x08000c39
 8000b9c:	08000c39 	.word	0x08000c39
 8000ba0:	08000bbd 	.word	0x08000bbd
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000ba4:	4a33      	ldr	r2, [pc, #204]	; (8000c74 <SystemCoreClockUpdate+0x134>)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	6013      	str	r3, [r2, #0]
      break;
 8000baa:	e049      	b.n	8000c40 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000bac:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <SystemCoreClockUpdate+0x134>)
 8000bae:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <SystemCoreClockUpdate+0x138>)
 8000bb0:	601a      	str	r2, [r3, #0]
      break;
 8000bb2:	e045      	b.n	8000c40 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <SystemCoreClockUpdate+0x134>)
 8000bb6:	4a31      	ldr	r2, [pc, #196]	; (8000c7c <SystemCoreClockUpdate+0x13c>)
 8000bb8:	601a      	str	r2, [r3, #0]
      break;
 8000bba:	e041      	b.n	8000c40 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	f003 0303 	and.w	r3, r3, #3
 8000bc6:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d105      	bne.n	8000bea <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000bde:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <SystemCoreClockUpdate+0x138>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e00d      	b.n	8000c06 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d105      	bne.n	8000bfc <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000bf0:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <SystemCoreClockUpdate+0x13c>)
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e004      	b.n	8000c06 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	fb02 f303 	mul.w	r3, r2, r3
 8000c18:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0f5b      	lsrs	r3, r3, #29
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	3301      	adds	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <SystemCoreClockUpdate+0x134>)
 8000c34:	6013      	str	r3, [r2, #0]
      break;
 8000c36:	e003      	b.n	8000c40 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000c38:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <SystemCoreClockUpdate+0x134>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6013      	str	r3, [r2, #0]
      break;
 8000c3e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	f003 030f 	and.w	r3, r3, #15
 8000c4c:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <SystemCoreClockUpdate+0x140>)
 8000c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c52:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <SystemCoreClockUpdate+0x134>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemCoreClockUpdate+0x134>)
 8000c60:	6013      	str	r3, [r2, #0]

}
 8000c62:	bf00      	nop
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	08004f5c 	.word	0x08004f5c
 8000c74:	20000014 	.word	0x20000014
 8000c78:	00f42400 	.word	0x00f42400
 8000c7c:	01e84800 	.word	0x01e84800
 8000c80:	08004efc 	.word	0x08004efc

08000c84 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c84:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c86:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c88:	3304      	adds	r3, #4

08000c8a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c8e:	d3f9      	bcc.n	8000c84 <CopyDataInit>
  bx lr
 8000c90:	4770      	bx	lr

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c92:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c94:	3004      	adds	r0, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c96:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>
  bx lr
 8000c9a:	4770      	bx	lr

08000c9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000c9e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ca0:	f7ff fef8 	bl	8000a94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <LoopForever+0x8>)
 8000ca6:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <LoopForever+0xc>)
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <LoopForever+0x10>)
 8000caa:	2300      	movs	r3, #0
 8000cac:	f7ff ffed 	bl	8000c8a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <LoopForever+0x14>)
 8000cb2:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <LoopForever+0x18>)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f7ff ffee 	bl	8000c96 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000cba:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <LoopForever+0x1c>)
 8000cbc:	490b      	ldr	r1, [pc, #44]	; (8000cec <LoopForever+0x20>)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f7ff ffe9 	bl	8000c96 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cc4:	f004 f8ac 	bl	8004e20 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000cc8:	f7ff fc08 	bl	80004dc <main>

08000ccc <LoopForever>:

LoopForever:
  b LoopForever
 8000ccc:	e7fe      	b.n	8000ccc <LoopForever>
 8000cce:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000cd0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	20000020 	.word	0x20000020
 8000cdc:	08004fc4 	.word	0x08004fc4
  INIT_BSS _sbss, _ebss
 8000ce0:	20000020 	.word	0x20000020
 8000ce4:	200003cc 	.word	0x200003cc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000ce8:	20030000 	.word	0x20030000
 8000cec:	20030000 	.word	0x20030000

08000cf0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_Init+0x3c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <HAL_Init+0x3c>)
 8000d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f000 f92a 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d10:	2000      	movs	r0, #0
 8000d12:	f000 f80f 	bl	8000d34 <HAL_InitTick>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	e001      	b.n	8000d26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d22:	f7ff fe0d 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d26:	79fb      	ldrb	r3, [r7, #7]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	58004000 	.word	0x58004000

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000d40:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d024      	beq.n	8000d92 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d48:	f002 fddc 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <HAL_InitTick+0x6c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	4619      	mov	r1, r3
 8000d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d58:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f924 	bl	8000fae <HAL_SYSTICK_Config>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10f      	bne.n	8000d8c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	d809      	bhi.n	8000d86 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d72:	2200      	movs	r2, #0
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7a:	f000 f8fe 	bl	8000f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7e:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <HAL_InitTick+0x70>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e007      	b.n	8000d96 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e004      	b.n	8000d96 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
 8000d90:	e001      	b.n	8000d96 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2000001c 	.word	0x2000001c
 8000da4:	20000018 	.word	0x20000018

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000001c 	.word	0x2000001c
 8000dcc:	200003c8 	.word	0x200003c8

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200003c8 	.word	0x200003c8

08000de8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTickPrio+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000018 	.word	0x20000018

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff5e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5f 	bl	8000e64 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffb2 	bl	8000f20 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e02d      	b.n	8001034 <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d106      	bne.n	8000ff2 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff fcaf 	bl	8000950 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8000ffc:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6851      	ldr	r1, [r2, #4]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6892      	ldr	r2, [r2, #8]
 8001008:	4311      	orrs	r1, r2
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6952      	ldr	r2, [r2, #20]
 800100e:	4311      	orrs	r1, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	430b      	orrs	r3, r1
 8001016:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	4613      	mov	r3, r2
 800104a:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d172      	bne.n	800113e <HAL_CRYP_Encrypt+0x102>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2202      	movs	r2, #2
 800105c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_CRYP_Encrypt+0x32>
 800106a:	2302      	movs	r3, #2
 800106c:	e070      	b.n	8001150 <HAL_CRYP_Encrypt+0x114>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	2b00      	cmp	r3, #0
 8001096:	d106      	bne.n	80010a6 <HAL_CRYP_Encrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	b29a      	uxth	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80010a4:	e003      	b.n	80010ae <HAL_CRYP_Encrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0218 	bic.w	r2, r2, #24
 80010bc:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <HAL_CRYP_Encrypt+0x11c>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]

    switch (algo)
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	2b40      	cmp	r3, #64	; 0x40
 80010ce:	d00c      	beq.n	80010ea <HAL_CRYP_Encrypt+0xae>
 80010d0:	2b40      	cmp	r3, #64	; 0x40
 80010d2:	d804      	bhi.n	80010de <HAL_CRYP_Encrypt+0xa2>
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <HAL_CRYP_Encrypt+0xae>
 80010d8:	2b20      	cmp	r3, #32
 80010da:	d006      	beq.n	80010ea <HAL_CRYP_Encrypt+0xae>
 80010dc:	e01a      	b.n	8001114 <HAL_CRYP_Encrypt+0xd8>
 80010de:	2b60      	cmp	r3, #96	; 0x60
 80010e0:	d00a      	beq.n	80010f8 <HAL_CRYP_Encrypt+0xbc>
 80010e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e6:	d00e      	beq.n	8001106 <HAL_CRYP_Encrypt+0xca>
 80010e8:	e014      	b.n	8001114 <HAL_CRYP_Encrypt+0xd8>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 80010ea:	6a39      	ldr	r1, [r7, #32]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f8d1 	bl	8001294 <CRYP_AES_Encrypt>
 80010f2:	4603      	mov	r3, r0
 80010f4:	75fb      	strb	r3, [r7, #23]
        break;
 80010f6:	e016      	b.n	8001126 <HAL_CRYP_Encrypt+0xea>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80010f8:	6a39      	ldr	r1, [r7, #32]
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 fb3a 	bl	8001774 <CRYP_AESGCM_Process>
 8001100:	4603      	mov	r3, r0
 8001102:	75fb      	strb	r3, [r7, #23]
        break;
 8001104:	e00f      	b.n	8001126 <HAL_CRYP_Encrypt+0xea>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8001106:	6a39      	ldr	r1, [r7, #32]
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 fce9 	bl	8001ae0 <CRYP_AESCCM_Process>
 800110e:	4603      	mov	r3, r0
 8001110:	75fb      	strb	r3, [r7, #23]
        break;
 8001112:	e008      	b.n	8001126 <HAL_CRYP_Encrypt+0xea>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001118:	f043 0220 	orr.w	r2, r3, #32
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	75fb      	strb	r3, [r7, #23]
        break;
 8001124:	bf00      	nop
    }

    if (status == HAL_OK)
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d110      	bne.n	800114e <HAL_CRYP_Encrypt+0x112>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800113c:	e007      	b.n	800114e <HAL_CRYP_Encrypt+0x112>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001142:	f043 0208 	orr.w	r2, r3, #8
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800114e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	00010060 	.word	0x00010060

0800115c <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif

  if (hcryp->State == HAL_CRYP_STATE_READY)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b01      	cmp	r3, #1
 8001176:	d174      	bne.n	8001262 <HAL_CRYP_Decrypt+0x106>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2202      	movs	r2, #2
 800117c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_CRYP_Decrypt+0x32>
 800118a:	2302      	movs	r3, #2
 800118c:	e072      	b.n	8001274 <HAL_CRYP_Decrypt+0x118>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <HAL_CRYP_Decrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	b29a      	uxth	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80011c4:	e003      	b.n	80011ce <HAL_CRYP_Decrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	88fa      	ldrh	r2, [r7, #6]
 80011ca:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 0218 	bic.w	r2, r3, #24
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f042 0210 	orr.w	r2, r2, #16
 80011e0:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <HAL_CRYP_Decrypt+0x120>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]

    switch (algo)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	2b40      	cmp	r3, #64	; 0x40
 80011f2:	d00c      	beq.n	800120e <HAL_CRYP_Decrypt+0xb2>
 80011f4:	2b40      	cmp	r3, #64	; 0x40
 80011f6:	d804      	bhi.n	8001202 <HAL_CRYP_Decrypt+0xa6>
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <HAL_CRYP_Decrypt+0xb2>
 80011fc:	2b20      	cmp	r3, #32
 80011fe:	d006      	beq.n	800120e <HAL_CRYP_Decrypt+0xb2>
 8001200:	e01a      	b.n	8001238 <HAL_CRYP_Decrypt+0xdc>
 8001202:	2b60      	cmp	r3, #96	; 0x60
 8001204:	d00a      	beq.n	800121c <HAL_CRYP_Decrypt+0xc0>
 8001206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120a:	d00e      	beq.n	800122a <HAL_CRYP_Decrypt+0xce>
 800120c:	e014      	b.n	8001238 <HAL_CRYP_Decrypt+0xdc>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 800120e:	6a39      	ldr	r1, [r7, #32]
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f8b8 	bl	8001386 <CRYP_AES_Decrypt>
 8001216:	4603      	mov	r3, r0
 8001218:	75fb      	strb	r3, [r7, #23]
        break;
 800121a:	e016      	b.n	800124a <HAL_CRYP_Decrypt+0xee>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 800121c:	6a39      	ldr	r1, [r7, #32]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 faa8 	bl	8001774 <CRYP_AESGCM_Process>
 8001224:	4603      	mov	r3, r0
 8001226:	75fb      	strb	r3, [r7, #23]
        break;
 8001228:	e00f      	b.n	800124a <HAL_CRYP_Decrypt+0xee>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 800122a:	6a39      	ldr	r1, [r7, #32]
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f000 fc57 	bl	8001ae0 <CRYP_AESCCM_Process>
 8001232:	4603      	mov	r3, r0
 8001234:	75fb      	strb	r3, [r7, #23]
        break;
 8001236:	e008      	b.n	800124a <HAL_CRYP_Decrypt+0xee>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123c:	f043 0220 	orr.w	r2, r3, #32
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	75fb      	strb	r3, [r7, #23]
        break;
 8001248:	bf00      	nop
    }

    if (status == HAL_OK)
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d110      	bne.n	8001272 <HAL_CRYP_Decrypt+0x116>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2201      	movs	r2, #1
 8001254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001260:	e007      	b.n	8001272 <HAL_CRYP_Decrypt+0x116>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001266:	f043 0208 	orr.w	r2, r3, #8
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001272:	7dfb      	ldrb	r3, [r7, #23]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	00010060 	.word	0x00010060

08001280 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CRYP_ErrorCallback could be implemented in the user file
   */
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800129e:	2301      	movs	r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d109      	bne.n	80012be <CRYP_AES_Encrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <CRYP_AES_Encrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	e002      	b.n	80012be <CRYP_AES_Encrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d121      	bne.n	8001308 <CRYP_AES_Encrypt+0x74>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f9f1 	bl	80016b2 <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d017      	beq.n	8001308 <CRYP_AES_Encrypt+0x74>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6852      	ldr	r2, [r2, #4]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6892      	ldr	r2, [r2, #8]
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68d2      	ldr	r2, [r2, #12]
 8001306:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2202      	movs	r2, #2
 800130c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001322:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800132a:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800132c:	e00a      	b.n	8001344 <CRYP_AES_Encrypt+0xb0>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f904 	bl	800153e <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800133a:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001342:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	b29b      	uxth	r3, r3
 800134e:	89fa      	ldrh	r2, [r7, #14]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <CRYP_AES_Encrypt+0xd0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	b29b      	uxth	r3, r3
 800135e:	89ba      	ldrh	r2, [r7, #12]
 8001360:	429a      	cmp	r2, r3
 8001362:	d3e4      	bcc.n	800132e <CRYP_AES_Encrypt+0x9a>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8001390:	2301      	movs	r3, #1
 8001392:	60bb      	str	r3, [r7, #8]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001398:	2b01      	cmp	r3, #1
 800139a:	d109      	bne.n	80013b0 <CRYP_AES_Decrypt+0x2a>
  {
    if (hcryp->KeyIVConfig == 1U)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d102      	bne.n	80013aa <CRYP_AES_Decrypt+0x24>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	e002      	b.n	80013b0 <CRYP_AES_Decrypt+0x2a>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	f040 8084 	bne.w	80014c0 <CRYP_AES_Decrypt+0x13a>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	2b40      	cmp	r3, #64	; 0x40
 80013be:	d05d      	beq.n	800147c <CRYP_AES_Decrypt+0xf6>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d149      	bne.n	800145e <CRYP_AES_Decrypt+0xd8>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 0218 	bic.w	r2, r3, #24
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0208 	orr.w	r2, r2, #8
 80013dc:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	4619      	mov	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f964 	bl	80016b2 <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0201 	orr.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 ff01 	bl	8002204 <CRYP_WaitOnCCFlag>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d017      	beq.n	8001438 <CRYP_AES_Decrypt+0xb2>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0201 	bic.w	r2, r2, #1
 8001416:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	f043 0210 	orr.w	r2, r3, #16
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e07e      	b.n	8001536 <CRYP_AES_Decrypt+0x1b0>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001446:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 0218 	bic.w	r2, r3, #24
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0210 	orr.w	r2, r2, #16
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e014      	b.n	8001488 <CRYP_AES_Decrypt+0x102>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f924 	bl	80016b2 <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0218 	orr.w	r2, r2, #24
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e005      	b.n	8001488 <CRYP_AES_Decrypt+0x102>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4619      	mov	r1, r3
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 f915 	bl	80016b2 <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d017      	beq.n	80014c0 <CRYP_AES_Decrypt+0x13a>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6852      	ldr	r2, [r2, #4]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6892      	ldr	r2, [r2, #8]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68d2      	ldr	r2, [r2, #12]
 80014be:	621a      	str	r2, [r3, #32]
    }
  } /* if (DoKeyIVConfig == 1U) */

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2202      	movs	r2, #2
 80014c4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014da:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014e2:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80014e4:	e00a      	b.n	80014fc <CRYP_AES_Decrypt+0x176>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80014e6:	6839      	ldr	r1, [r7, #0]
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f828 	bl	800153e <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80014f2:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014fa:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	b29b      	uxth	r3, r3
 8001506:	89fa      	ldrh	r2, [r7, #14]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <CRYP_AES_Decrypt+0x196>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001512:	089b      	lsrs	r3, r3, #2
 8001514:	b29b      	uxth	r3, r3
 8001516:	89ba      	ldrh	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d3e4      	bcc.n	80014e6 <CRYP_AES_Decrypt+0x160>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b088      	sub	sp, #32
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001550:	b29b      	uxth	r3, r3
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	441a      	add	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001562:	b29b      	uxth	r3, r3
 8001564:	3301      	adds	r3, #1
 8001566:	b29a      	uxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001574:	b29b      	uxth	r3, r3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	441a      	add	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001586:	b29b      	uxth	r3, r3
 8001588:	3301      	adds	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001598:	b29b      	uxth	r3, r3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	441a      	add	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3301      	adds	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015bc:	b29b      	uxth	r3, r3
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	441a      	add	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80015d8:	6839      	ldr	r1, [r7, #0]
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fe12 	bl	8002204 <CRYP_WaitOnCCFlag>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d018      	beq.n	8001618 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fa:	f043 0210 	orr.w	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fe34 	bl	8001280 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001626:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	e00c      	b.n	8001648 <CRYP_AES_ProcessData+0x10a>
  {
    temp[i] = hcryp->Instance->DOUTR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	f107 0120 	add.w	r1, r7, #32
 800163c:	440b      	add	r3, r1
 800163e:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3301      	adds	r3, #1
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d9ef      	bls.n	800162e <CRYP_AES_ProcessData+0xf0>
  }
  i= 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8001652:	e01b      	b.n	800168c <CRYP_AES_ProcessData+0x14e>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800165e:	b29b      	uxth	r3, r3
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	441a      	add	r2, r3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	f107 0120 	add.w	r1, r7, #32
 800166c:	440b      	add	r3, r1
 800166e:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8001672:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167a:	b29b      	uxth	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    i++;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800169c:	3303      	adds	r3, #3
 800169e:	089b      	lsrs	r3, r3, #2
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d202      	bcs.n	80016aa <CRYP_AES_ProcessData+0x16c>
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d9d4      	bls.n	8001654 <CRYP_AES_ProcessData+0x116>
  }
}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d050      	beq.n	8001766 <CRYP_SetKey+0xb4>
  {
    switch (KeySize)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d034      	beq.n	8001734 <CRYP_SetKey+0x82>
 80016ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016ce:	d000      	beq.n	80016d2 <CRYP_SetKey+0x20>
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);

        break;
      default:
        break;
 80016d0:	e04a      	b.n	8001768 <CRYP_SetKey+0xb6>
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6852      	ldr	r2, [r2, #4]
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6892      	ldr	r2, [r2, #8]
 80016f4:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68d2      	ldr	r2, [r2, #12]
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68da      	ldr	r2, [r3, #12]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6912      	ldr	r2, [r2, #16]
 800170c:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6952      	ldr	r2, [r2, #20]
 8001718:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6992      	ldr	r2, [r2, #24]
 8001724:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69d2      	ldr	r2, [r2, #28]
 8001730:	611a      	str	r2, [r3, #16]
        break;
 8001732:	e019      	b.n	8001768 <CRYP_SetKey+0xb6>
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6852      	ldr	r2, [r2, #4]
 800174a:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6892      	ldr	r2, [r2, #8]
 8001756:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68d2      	ldr	r2, [r2, #12]
 8001762:	611a      	str	r2, [r3, #16]
        break;
 8001764:	e000      	b.n	8001768 <CRYP_SetKey+0xb6>
    }
  }
 8001766:	bf00      	nop
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08e      	sub	sp, #56	; 0x38
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	b29b      	uxth	r3, r3
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800178a:	2301      	movs	r3, #1
 800178c:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	2b01      	cmp	r3, #1
 8001794:	d118      	bne.n	80017c8 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10a      	bne.n	80017b4 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80017ac:	441a      	add	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80017b2:	e00f      	b.n	80017d4 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80017c6:	e005      	b.n	80017d4 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80017ce:	461a      	mov	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d179      	bne.n	80018ce <CRYP_AESGCM_Process+0x15a>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4619      	mov	r1, r3
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ff55 	bl	80016b2 <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6852      	ldr	r2, [r2, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6892      	ldr	r2, [r2, #8]
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68d2      	ldr	r2, [r2, #12]
 8001836:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fcda 	bl	8002204 <CRYP_WaitOnCCFlag>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00f      	beq.n	8001876 <CRYP_AESGCM_Process+0x102>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185a:	f043 0210 	orr.w	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e130      	b.n	8001ad8 <CRYP_AESGCM_Process+0x364>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001884:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8001886:	6839      	ldr	r1, [r7, #0]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 fadf 	bl	8001e4c <CRYP_GCMCCM_SetHeaderPhase>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <CRYP_AESGCM_Process+0x124>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e11f      	b.n	8001ad8 <CRYP_AESGCM_Process+0x364>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018bc:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018cc:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	b29b      	uxth	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <CRYP_AESGCM_Process+0x172>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 80018de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e0:	f023 0303 	bic.w	r3, r3, #3
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e6:	f7ff fa73 	bl	8000dd0 <HAL_GetTick>
 80018ea:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80018fe:	e033      	b.n	8001968 <CRYP_AESGCM_Process+0x1f4>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001900:	6839      	ldr	r1, [r7, #0]
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fe1b 	bl	800153e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d022      	beq.n	8001956 <CRYP_AESGCM_Process+0x1e2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001910:	f7ff fa5e 	bl	8000dd0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d302      	bcc.n	8001926 <CRYP_AESGCM_Process+0x1b2>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d117      	bne.n	8001956 <CRYP_AESGCM_Process+0x1e2>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0201 	bic.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0c0      	b.n	8001ad8 <CRYP_AESGCM_Process+0x364>
      }
    }
    incount = hcryp->CrypInCount;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800195a:	b29b      	uxth	r3, r3
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001964:	b29b      	uxth	r3, r3
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800196a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196c:	429a      	cmp	r2, r3
 800196e:	d203      	bcs.n	8001978 <CRYP_AESGCM_Process+0x204>
 8001970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001974:	429a      	cmp	r2, r3
 8001976:	d3c3      	bcc.n	8001900 <CRYP_AESGCM_Process+0x18c>
  }

  if ((hcryp->Size % 16U) != 0U)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	b29b      	uxth	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a6 	beq.w	8001ad6 <CRYP_AESGCM_Process+0x362>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	b29b      	uxth	r3, r3
 8001994:	3301      	adds	r3, #1
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0318 	and.w	r3, r3, #24
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <CRYP_AESGCM_Process+0x252>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	051a      	lsls	r2, r3, #20
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <CRYP_AESGCM_Process+0x268>
    {
      lastwordsize = (16U - npblb) / 4U;
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f1c3 0310 	rsb	r3, r3, #16
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019da:	e005      	b.n	80019e8 <CRYP_AESGCM_Process+0x274>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	f1c3 0310 	rsb	r3, r3, #16
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3301      	adds	r3, #1
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
 80019ec:	e014      	b.n	8001a18 <CRYP_AESGCM_Process+0x2a4>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	441a      	add	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	3301      	adds	r3, #1
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
 8001a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d3e6      	bcc.n	80019ee <CRYP_AESGCM_Process+0x27a>
    }
    while (index < 4U)
 8001a20:	e006      	b.n	8001a30 <CRYP_AESGCM_Process+0x2bc>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
      index++;
 8001a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8001a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d9f5      	bls.n	8001a22 <CRYP_AESGCM_Process+0x2ae>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001a36:	6839      	ldr	r1, [r7, #0]
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fbe3 	bl	8002204 <CRYP_WaitOnCCFlag>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00a      	beq.n	8001a5a <CRYP_AESGCM_Process+0x2e6>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fc13 	bl	8001280 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a68:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6e:	e00c      	b.n	8001a8a <CRYP_AESGCM_Process+0x316>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001a7e:	440b      	add	r3, r1
 8001a80:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	3301      	adds	r3, #1
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d9ef      	bls.n	8001a70 <CRYP_AESGCM_Process+0x2fc>
    }
    for (index = 0U; index < lastwordsize; index++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	633b      	str	r3, [r7, #48]	; 0x30
 8001a94:	e01b      	b.n	8001ace <CRYP_AESGCM_Process+0x35a>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	441a      	add	r2, r3
 8001aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001aae:	440b      	add	r3, r1
 8001ab0:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001ab4:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 8001ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aca:	3301      	adds	r3, #1
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d3df      	bcc.n	8001a96 <CRYP_AESGCM_Process+0x322>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3738      	adds	r7, #56	; 0x38
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08e      	sub	sp, #56	; 0x38
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8001af6:	2301      	movs	r3, #1
 8001af8:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d118      	bne.n	8001b34 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d10a      	bne.n	8001b20 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8001b18:	441a      	add	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b1e:	e00f      	b.n	8001b40 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b32:	e005      	b.n	8001b40 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d173      	bne.n	8001c2e <CRYP_AESCCM_Process+0x14e>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fd9f 	bl	80016b2 <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1a      	ldr	r2, [r3, #32]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1a      	ldr	r2, [r3, #32]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6852      	ldr	r2, [r2, #4]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6892      	ldr	r2, [r2, #8]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1a      	ldr	r2, [r3, #32]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68d2      	ldr	r2, [r2, #12]
 8001ba2:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fb24 	bl	8002204 <CRYP_WaitOnCCFlag>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00f      	beq.n	8001be2 <CRYP_AESCCM_Process+0x102>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	f043 0210 	orr.w	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e12f      	b.n	8001e42 <CRYP_AESCCM_Process+0x362>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bf0:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8001bf2:	6839      	ldr	r1, [r7, #0]
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f929 	bl	8001e4c <CRYP_GCMCCM_SetHeaderPhase>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <CRYP_AESCCM_Process+0x124>
    {
      return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e11e      	b.n	8001e42 <CRYP_AESCCM_Process+0x362>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c1c:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c2c:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <CRYP_AESCCM_Process+0x166>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	f023 0303 	bic.w	r3, r3, #3
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c46:	f7ff f8c3 	bl	8000dd0 <HAL_GetTick>
 8001c4a:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001c5e:	e033      	b.n	8001cc8 <CRYP_AESCCM_Process+0x1e8>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fc6b 	bl	800153e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6e:	d022      	beq.n	8001cb6 <CRYP_AESCCM_Process+0x1d6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8001c70:	f7ff f8ae 	bl	8000dd0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d302      	bcc.n	8001c86 <CRYP_AESCCM_Process+0x1a6>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d117      	bne.n	8001cb6 <CRYP_AESCCM_Process+0x1d6>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9a:	f043 0210 	orr.w	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e0c5      	b.n	8001e42 <CRYP_AESCCM_Process+0x362>
      }
    }
    incount = hcryp->CrypInCount;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8001cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d203      	bcs.n	8001cd8 <CRYP_AESCCM_Process+0x1f8>
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d3c3      	bcc.n	8001c60 <CRYP_AESCCM_Process+0x180>
  }

  if ((hcryp->Size % 16U) != 0U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80ab 	beq.w	8001e40 <CRYP_AESCCM_Process+0x360>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0318 	and.w	r3, r3, #24
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d10a      	bne.n	8001d26 <CRYP_AESCCM_Process+0x246>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	051a      	lsls	r2, r3, #20
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <CRYP_AESCCM_Process+0x25c>
    {
      lastwordsize = (16U - npblb) / 4U;
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f1c3 0310 	rsb	r3, r3, #16
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d3a:	e005      	b.n	8001d48 <CRYP_AESCCM_Process+0x268>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f1c3 0310 	rsb	r3, r3, #16
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3301      	adds	r3, #1
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d4c:	e014      	b.n	8001d78 <CRYP_AESCCM_Process+0x298>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	441a      	add	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	3301      	adds	r3, #1
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
 8001d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3e6      	bcc.n	8001d4e <CRYP_AESCCM_Process+0x26e>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8001d80:	e006      	b.n	8001d90 <CRYP_AESCCM_Process+0x2b0>
    {
      hcryp->Instance->DINR  = 0U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d9f5      	bls.n	8001d82 <CRYP_AESCCM_Process+0x2a2>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fa33 	bl	8002204 <CRYP_WaitOnCCFlag>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00f      	beq.n	8001dc4 <CRYP_AESCCM_Process+0x2e4>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da8:	f043 0210 	orr.w	r2, r3, #16
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e03e      	b.n	8001e42 <CRYP_AESCCM_Process+0x362>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd2:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd8:	e00c      	b.n	8001df4 <CRYP_AESCCM_Process+0x314>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001de8:	440b      	add	r3, r1
 8001dea:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8001dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df0:	3301      	adds	r3, #1
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
 8001df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d9ef      	bls.n	8001dda <CRYP_AESCCM_Process+0x2fa>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dfe:	e01b      	b.n	8001e38 <CRYP_AESCCM_Process+0x358>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	441a      	add	r2, r3
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e18:	440b      	add	r3, r1
 8001e1a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001e1e:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	3301      	adds	r3, #1
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
 8001e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d3df      	bcc.n	8001e00 <CRYP_AESCCM_Process+0x320>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3738      	adds	r7, #56	; 0x38
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b08b      	sub	sp, #44	; 0x2c
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[4] = {0x0U, 0x0FFU, 0x0FFFFU, 0x0FFFFFFU};
 8001e56:	4b8c      	ldr	r3, [pc, #560]	; (8002088 <CRYP_GCMCCM_SetHeaderPhase+0x23c>)
 8001e58:	f107 040c 	add.w	r4, r7, #12
 8001e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d104      	bne.n	8001e74 <CRYP_GCMCCM_SetHeaderPhase+0x28>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	623b      	str	r3, [r7, #32]
 8001e72:	e002      	b.n	8001e7a <CRYP_GCMCCM_SetHeaderPhase+0x2e>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	623b      	str	r3, [r7, #32]
  }

  if ((size_in_bytes != 0U))
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8195 	beq.w	80021ac <CRYP_GCMCCM_SetHeaderPhase+0x360>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d17a      	bne.n	8001fb2 <CRYP_GCMCCM_SetHeaderPhase+0x166>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	e071      	b.n	8001fa6 <CRYP_GCMCCM_SetHeaderPhase+0x15a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	441a      	add	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	441a      	add	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3301      	adds	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	441a      	add	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3301      	adds	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	441a      	add	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8001f52:	6839      	ldr	r1, [r7, #0]
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f955 	bl	8002204 <CRYP_WaitOnCCFlag>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f043 0210 	orr.w	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e135      	b.n	80021fc <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f9e:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d388      	bcc.n	8001ec2 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8001fb0:	e123      	b.n	80021fa <CRYP_GCMCCM_SetHeaderPhase+0x3ae>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	e074      	b.n	80020a2 <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699a      	ldr	r2, [r3, #24]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699a      	ldr	r2, [r3, #24]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002008:	b29b      	uxth	r3, r3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	441a      	add	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800201a:	b29b      	uxth	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800202c:	b29b      	uxth	r3, r3
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	441a      	add	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800203e:	b29b      	uxth	r3, r3
 8002040:	3301      	adds	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002048:	6839      	ldr	r1, [r7, #0]
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8da 	bl	8002204 <CRYP_WaitOnCCFlag>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d01a      	beq.n	800208c <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206a:	f043 0210 	orr.w	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0ba      	b.n	80021fc <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
 8002086:	bf00      	nop
 8002088:	08004e90 	.word	0x08004e90
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800209a:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	3304      	adds	r3, #4
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d384      	bcc.n	8001fb8 <CRYP_GCMCCM_SetHeaderPhase+0x16c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	e014      	b.n	80020de <CRYP_GCMCCM_SetHeaderPhase+0x292>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80020bc:	b29b      	uxth	r3, r3
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	441a      	add	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	3301      	adds	r3, #1
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d3e3      	bcc.n	80020b4 <CRYP_GCMCCM_SetHeaderPhase+0x268>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 80020f6:	e006      	b.n	8002106 <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	3301      	adds	r3, #1
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
        while (loopcounter < 4U)
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	2b03      	cmp	r3, #3
 800210a:	d9f5      	bls.n	80020f8 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 800210c:	e026      	b.n	800215c <CRYP_GCMCCM_SetHeaderPhase+0x310>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeroes */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002116:	b29b      	uxth	r3, r3
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61fb      	str	r3, [r7, #28]
         tmp &= mask[size_in_bytes % 4U];
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800212c:	4413      	add	r3, r2
 800212e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	4013      	ands	r3, r2
 8002136:	61fb      	str	r3, [r7, #28]
         hcryp->Instance->DINR = tmp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	609a      	str	r2, [r3, #8]
         loopcounter++;
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	3301      	adds	r3, #1
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 8002146:	e006      	b.n	8002156 <CRYP_GCMCCM_SetHeaderPhase+0x30a>
         {
           hcryp->Instance->DINR = 0x0U;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
           loopcounter++;
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	3301      	adds	r3, #1
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
         while (loopcounter < 4U)
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	2b03      	cmp	r3, #3
 800215a:	d9f5      	bls.n	8002148 <CRYP_GCMCCM_SetHeaderPhase+0x2fc>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f850 	bl	8002204 <CRYP_WaitOnCCFlag>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d017      	beq.n	800219a <CRYP_GCMCCM_SetHeaderPhase+0x34e>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217e:	f043 0210 	orr.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e030      	b.n	80021fc <CRYP_GCMCCM_SetHeaderPhase+0x3b0>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	e026      	b.n	80021fa <CRYP_GCMCCM_SetHeaderPhase+0x3ae>
    }
  }
  else
  {
    if (hcryp->Init.Algorithm == CRYP_AES_GCM_GMAC)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	2b60      	cmp	r3, #96	; 0x60
 80021b2:	d122      	bne.n	80021fa <CRYP_GCMCCM_SetHeaderPhase+0x3ae>
    {
      /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 0106 	bic.w	r1, r3, #6
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

      /* Select header phase */
      CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e8:	601a      	str	r2, [r3, #0]

      /* Enable the CRYP peripheral */
      __HAL_CRYP_ENABLE(hcryp);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    }
  }
  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	372c      	adds	r7, #44	; 0x2c
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}

08002204 <CRYP_WaitOnCCFlag>:
  *         the configuration information for CRYP module.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800220e:	f7fe fddf 	bl	8000dd0 <HAL_GetTick>
 8002212:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8002214:	e010      	b.n	8002238 <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d00c      	beq.n	8002238 <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800221e:	f7fe fdd7 	bl	8000dd0 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d302      	bcc.n	8002234 <CRYP_WaitOnCCFlag+0x30>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e007      	b.n	8002248 <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0e7      	beq.n	8002216 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	e14c      	b.n	80024fa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2101      	movs	r1, #1
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	4013      	ands	r3, r2
 800226e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 813e 	beq.w	80024f4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d00b      	beq.n	8002298 <HAL_GPIO_Init+0x48>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d007      	beq.n	8002298 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800228c:	2b11      	cmp	r3, #17
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b12      	cmp	r3, #18
 8002296:	d130      	bne.n	80022fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ce:	2201      	movs	r2, #1
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f003 0201 	and.w	r2, r3, #1
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2203      	movs	r2, #3
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0xea>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b12      	cmp	r3, #18
 8002338:	d123      	bne.n	8002382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	08da      	lsrs	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3208      	adds	r2, #8
 8002342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	08da      	lsrs	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3208      	adds	r2, #8
 800237c:	6939      	ldr	r1, [r7, #16]
 800237e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	2203      	movs	r2, #3
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0203 	and.w	r2, r3, #3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 8098 	beq.w	80024f4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80023c4:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_GPIO_Init+0x2c8>)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023ee:	d019      	beq.n	8002424 <HAL_GPIO_Init+0x1d4>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a4a      	ldr	r2, [pc, #296]	; (800251c <HAL_GPIO_Init+0x2cc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d013      	beq.n	8002420 <HAL_GPIO_Init+0x1d0>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a49      	ldr	r2, [pc, #292]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00d      	beq.n	800241c <HAL_GPIO_Init+0x1cc>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a48      	ldr	r2, [pc, #288]	; (8002524 <HAL_GPIO_Init+0x2d4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d007      	beq.n	8002418 <HAL_GPIO_Init+0x1c8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a47      	ldr	r2, [pc, #284]	; (8002528 <HAL_GPIO_Init+0x2d8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d101      	bne.n	8002414 <HAL_GPIO_Init+0x1c4>
 8002410:	2304      	movs	r3, #4
 8002412:	e008      	b.n	8002426 <HAL_GPIO_Init+0x1d6>
 8002414:	2307      	movs	r3, #7
 8002416:	e006      	b.n	8002426 <HAL_GPIO_Init+0x1d6>
 8002418:	2303      	movs	r3, #3
 800241a:	e004      	b.n	8002426 <HAL_GPIO_Init+0x1d6>
 800241c:	2302      	movs	r3, #2
 800241e:	e002      	b.n	8002426 <HAL_GPIO_Init+0x1d6>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_GPIO_Init+0x1d6>
 8002424:	2300      	movs	r3, #0
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	f002 0203 	and.w	r2, r2, #3
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	4093      	lsls	r3, r2
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002436:	4938      	ldr	r1, [pc, #224]	; (8002518 <HAL_GPIO_Init+0x2c8>)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002444:	4b39      	ldr	r3, [pc, #228]	; (800252c <HAL_GPIO_Init+0x2dc>)
 8002446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800246a:	4a30      	ldr	r2, [pc, #192]	; (800252c <HAL_GPIO_Init+0x2dc>)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002472:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_GPIO_Init+0x2dc>)
 8002474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002498:	4a24      	ldr	r2, [pc, #144]	; (800252c <HAL_GPIO_Init+0x2dc>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_GPIO_Init+0x2dc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024c4:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_GPIO_Init+0x2dc>)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_GPIO_Init+0x2dc>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024ee:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_GPIO_Init+0x2dc>)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3301      	adds	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	f47f aeab 	bne.w	8002260 <HAL_GPIO_Init+0x10>
  }
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40010000 	.word	0x40010000
 800251c:	48000400 	.word	0x48000400
 8002520:	48000800 	.word	0x48000800
 8002524:	48000c00 	.word	0x48000c00
 8002528:	48001000 	.word	0x48001000
 800252c:	58000800 	.word	0x58000800

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800254c:	e002      	b.n	8002554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002562:	b08b      	sub	sp, #44	; 0x2c
 8002564:	af06      	add	r7, sp, #24
 8002566:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0ad      	b.n	80026ce <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fa26 	bl	80009d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2203      	movs	r2, #3
 8002590:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f002 fc02 	bl	8004da2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
 80025a2:	e035      	b.n	8002610 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	015b      	lsls	r3, r3, #5
 80025aa:	4413      	add	r3, r2
 80025ac:	3329      	adds	r3, #41	; 0x29
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	015b      	lsls	r3, r3, #5
 80025b8:	4413      	add	r3, r2
 80025ba:	3328      	adds	r3, #40	; 0x28
 80025bc:	7bfa      	ldrb	r2, [r7, #15]
 80025be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	b291      	uxth	r1, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	015b      	lsls	r3, r3, #5
 80025ca:	4413      	add	r3, r2
 80025cc:	3336      	adds	r3, #54	; 0x36
 80025ce:	460a      	mov	r2, r1
 80025d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	4413      	add	r3, r2
 80025da:	332b      	adds	r3, #43	; 0x2b
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	015b      	lsls	r3, r3, #5
 80025e6:	4413      	add	r3, r2
 80025e8:	3338      	adds	r3, #56	; 0x38
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	015b      	lsls	r3, r3, #5
 80025f4:	4413      	add	r3, r2
 80025f6:	333c      	adds	r3, #60	; 0x3c
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	3302      	adds	r3, #2
 8002602:	015b      	lsls	r3, r3, #5
 8002604:	4413      	add	r3, r2
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	3301      	adds	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	7bfa      	ldrb	r2, [r7, #15]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	429a      	cmp	r2, r3
 8002618:	d3c4      	bcc.n	80025a4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261a:	2300      	movs	r3, #0
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	e031      	b.n	8002684 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	015b      	lsls	r3, r3, #5
 8002626:	4413      	add	r3, r2
 8002628:	f203 1329 	addw	r3, r3, #297	; 0x129
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	015b      	lsls	r3, r3, #5
 8002636:	4413      	add	r3, r2
 8002638:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	015b      	lsls	r3, r3, #5
 8002646:	4413      	add	r3, r2
 8002648:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	015b      	lsls	r3, r3, #5
 8002656:	4413      	add	r3, r2
 8002658:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	015b      	lsls	r3, r3, #5
 8002666:	4413      	add	r3, r2
 8002668:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	330a      	adds	r3, #10
 8002676:	015b      	lsls	r3, r3, #5
 8002678:	4413      	add	r3, r2
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	3301      	adds	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d3c8      	bcc.n	8002620 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	687e      	ldr	r6, [r7, #4]
 8002696:	466d      	mov	r5, sp
 8002698:	f106 0410 	add.w	r4, r6, #16
 800269c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800269e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	602b      	str	r3, [r5, #0]
 80026a4:	1d33      	adds	r3, r6, #4
 80026a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a8:	6838      	ldr	r0, [r7, #0]
 80026aa:	f002 fb95 	bl	8004dd8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f805 	bl	80026d6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800270e:	b29b      	uxth	r3, r3
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	58000400 	.word	0x58000400

0800274c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <HAL_PWREx_GetVoltageRange+0x18>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	58000400 	.word	0x58000400

08002768 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800276c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800277a:	d101      	bne.n	8002780 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_RCC_HSE_EnableBypass>:
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800279a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279e:	6013      	str	r3, [r2, #0]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_RCC_HSE_DisableBypass>:
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_RCC_HSE_Enable>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_RCC_HSE_Disable>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80027ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <LL_RCC_HSE_IsReady>:
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002816:	d101      	bne.n	800281c <LL_RCC_HSE_IsReady+0x18>
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <LL_RCC_HSE_IsReady+0x1a>
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_RCC_HSI_Enable>:
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <LL_RCC_HSI_Disable>:
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002858:	6013      	str	r3, [r2, #0]
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_RCC_HSI_IsReady>:
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002876:	d101      	bne.n	800287c <LL_RCC_HSI_IsReady+0x18>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <LL_RCC_HSI_IsReady+0x1a>
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_RCC_HSI48_Enable>:
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80028b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <LL_RCC_HSI48_Disable>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_RCC_HSI48_IsReady>:
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d101      	bne.n	800290e <LL_RCC_HSI48_IsReady+0x18>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <LL_RCC_HSI48_IsReady+0x1a>
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <LL_RCC_LSE_Enable>:
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_RCC_LSE_Disable>:
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_RCC_LSE_EnableBypass>:
{
 800295e:	b480      	push	{r7}
 8002960:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_RCC_LSE_DisableBypass>:
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d101      	bne.n	80029ba <LL_RCC_LSE_IsReady+0x18>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <LL_RCC_LSE_IsReady+0x1a>
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f8:	f023 0301 	bic.w	r3, r3, #1
 80029fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d101      	bne.n	8002a22 <LL_RCC_LSI1_IsReady+0x18>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <LL_RCC_LSI1_IsReady+0x1a>
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d101      	bne.n	8002a8a <LL_RCC_LSI2_IsReady+0x18>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_RCC_LSI2_IsReady+0x1a>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6013      	str	r3, [r2, #0]
}
 8002af6:	bf00      	nop
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d101      	bne.n	8002b16 <LL_RCC_MSI_IsReady+0x16>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <LL_RCC_MSI_IsReady+0x18>
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	600b      	str	r3, [r1, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2bb0      	cmp	r3, #176	; 0xb0
 8002b60:	d901      	bls.n	8002b66 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002b62:	23b0      	movs	r3, #176	; 0xb0
 8002b64:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002b66:	687b      	ldr	r3, [r7, #4]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 0203 	bic.w	r2, r3, #3
 8002bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d44:	6013      	str	r3, [r2, #0]
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d62:	d101      	bne.n	8002d68 <LL_RCC_PLL_IsReady+0x18>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e000      	b.n	8002d6a <LL_RCC_PLL_IsReady+0x1a>
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d101      	bne.n	8002dee <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e0e:	d101      	bne.n	8002e14 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e34:	d101      	bne.n	8002e3a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e58:	d101      	bne.n	8002e5e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e7c:	d101      	bne.n	8002e82 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b08d      	sub	sp, #52	; 0x34
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e386      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 808f 	beq.w	8002fce <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb0:	f7ff fe89 	bl	8002bc6 <LL_RCC_GetSysClkSource>
 8002eb4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eb6:	f7ff ff82 	bl	8002dbe <LL_RCC_PLL_GetMainSource>
 8002eba:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_RCC_OscConfig+0x3e>
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d149      	bne.n	8002f5c <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d146      	bne.n	8002f5c <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ece:	f7ff fe17 	bl	8002b00 <LL_RCC_MSI_IsReady>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x54>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e365      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002ee8:	f7ff fe2f 	bl	8002b4a <LL_RCC_MSI_GetRange>
 8002eec:	4603      	mov	r3, r0
 8002eee:	429c      	cmp	r4, r3
 8002ef0:	d914      	bls.n	8002f1c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fd44 	bl	8003984 <RCC_SetFlashLatencyFromMSIRange>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e354      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fe09 	bl	8002b22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fe2d 	bl	8002b74 <LL_RCC_MSI_SetCalibTrimming>
 8002f1a:	e013      	b.n	8002f44 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fdfe 	bl	8002b22 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fe22 	bl	8002b74 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fd25 	bl	8003984 <RCC_SetFlashLatencyFromMSIRange>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e335      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002f44:	f7fd fdfc 	bl	8000b40 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f48:	4bb4      	ldr	r3, [pc, #720]	; (800321c <HAL_RCC_OscConfig+0x38c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fef1 	bl	8000d34 <HAL_InitTick>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d039      	beq.n	8002fcc <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e329      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01e      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f64:	f7ff fdae 	bl	8002ac4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f68:	f7fd ff32 	bl	8000dd0 <HAL_GetTick>
 8002f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f70:	f7fd ff2e 	bl	8000dd0 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e316      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f82:	f7ff fdbd 	bl	8002b00 <LL_RCC_MSI_IsReady>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f1      	beq.n	8002f70 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fdc6 	bl	8002b22 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fdea 	bl	8002b74 <LL_RCC_MSI_SetCalibTrimming>
 8002fa0:	e015      	b.n	8002fce <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fa2:	f7ff fd9e 	bl	8002ae2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fa6:	f7fd ff13 	bl	8000dd0 <HAL_GetTick>
 8002faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fae:	f7fd ff0f 	bl	8000dd0 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e2f7      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fc0:	f7ff fd9e 	bl	8002b00 <LL_RCC_MSI_IsReady>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f1      	bne.n	8002fae <HAL_RCC_OscConfig+0x11e>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d05a      	beq.n	8003090 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	f7ff fdf4 	bl	8002bc6 <LL_RCC_GetSysClkSource>
 8002fde:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe0:	f7ff feed 	bl	8002dbe <LL_RCC_PLL_GetMainSource>
 8002fe4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x168>
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d10d      	bne.n	800300e <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d10a      	bne.n	800300e <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	f7ff fc04 	bl	8002804 <LL_RCC_HSE_IsReady>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d045      	beq.n	800308e <HAL_RCC_OscConfig+0x1fe>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d141      	bne.n	800308e <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e2d0      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003016:	d102      	bne.n	800301e <HAL_RCC_OscConfig+0x18e>
 8003018:	f7ff fbd6 	bl	80027c8 <LL_RCC_HSE_Enable>
 800301c:	e00d      	b.n	800303a <HAL_RCC_OscConfig+0x1aa>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003026:	d104      	bne.n	8003032 <HAL_RCC_OscConfig+0x1a2>
 8003028:	f7ff fbb0 	bl	800278c <LL_RCC_HSE_EnableBypass>
 800302c:	f7ff fbcc 	bl	80027c8 <LL_RCC_HSE_Enable>
 8003030:	e003      	b.n	800303a <HAL_RCC_OscConfig+0x1aa>
 8003032:	f7ff fbd8 	bl	80027e6 <LL_RCC_HSE_Disable>
 8003036:	f7ff fbb8 	bl	80027aa <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d012      	beq.n	8003068 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7fd fec5 	bl	8000dd0 <HAL_GetTick>
 8003046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304a:	f7fd fec1 	bl	8000dd0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b64      	cmp	r3, #100	; 0x64
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e2a9      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 800305c:	f7ff fbd2 	bl	8002804 <LL_RCC_HSE_IsReady>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f1      	beq.n	800304a <HAL_RCC_OscConfig+0x1ba>
 8003066:	e013      	b.n	8003090 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd feb2 	bl	8000dd0 <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fd feae 	bl	8000dd0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e296      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003082:	f7ff fbbf 	bl	8002804 <LL_RCC_HSE_IsReady>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f1      	bne.n	8003070 <HAL_RCC_OscConfig+0x1e0>
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d051      	beq.n	8003140 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309c:	f7ff fd93 	bl	8002bc6 <LL_RCC_GetSysClkSource>
 80030a0:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a2:	f7ff fe8c 	bl	8002dbe <LL_RCC_PLL_GetMainSource>
 80030a6:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d005      	beq.n	80030ba <HAL_RCC_OscConfig+0x22a>
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b0c      	cmp	r3, #12
 80030b2:	d113      	bne.n	80030dc <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d110      	bne.n	80030dc <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ba:	f7ff fbd3 	bl	8002864 <LL_RCC_HSI_IsReady>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_OscConfig+0x240>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e26f      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fbd7 	bl	8002888 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030da:	e031      	b.n	8003140 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d019      	beq.n	8003118 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e4:	f7ff fba0 	bl	8002828 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fd fe72 	bl	8000dd0 <HAL_GetTick>
 80030ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f0:	f7fd fe6e 	bl	8000dd0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e256      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003102:	f7ff fbaf 	bl	8002864 <LL_RCC_HSI_IsReady>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f1      	beq.n	80030f0 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fbb9 	bl	8002888 <LL_RCC_HSI_SetCalibTrimming>
 8003116:	e013      	b.n	8003140 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003118:	f7ff fb95 	bl	8002846 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fd fe58 	bl	8000dd0 <HAL_GetTick>
 8003120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003124:	f7fd fe54 	bl	8000dd0 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e23c      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003136:	f7ff fb95 	bl	8002864 <LL_RCC_HSI_IsReady>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f1      	bne.n	8003124 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a2 	beq.w	800329e <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d075      	beq.n	800324e <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d046      	beq.n	80031fc <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800316e:	f7ff fc4c 	bl	8002a0a <LL_RCC_LSI1_IsReady>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d113      	bne.n	80031a0 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003178:	f7ff fc25 	bl	80029c6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800317c:	f7fd fe28 	bl	8000dd0 <HAL_GetTick>
 8003180:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003184:	f7fd fe24 	bl	8000dd0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e20c      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003196:	f7ff fc38 	bl	8002a0a <LL_RCC_LSI1_IsReady>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f1      	beq.n	8003184 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80031a0:	f7ff fc45 	bl	8002a2e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fd fe14 	bl	8000dd0 <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80031ac:	f7fd fe10 	bl	8000dd0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e1f8      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80031be:	f7ff fc58 	bl	8002a72 <LL_RCC_LSI2_IsReady>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f1      	beq.n	80031ac <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fc62 	bl	8002a96 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80031d2:	f7ff fc09 	bl	80029e8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d6:	f7fd fdfb 	bl	8000dd0 <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80031de:	f7fd fdf7 	bl	8000dd0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e1df      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80031f0:	f7ff fc0b 	bl	8002a0a <LL_RCC_LSI1_IsReady>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f1      	bne.n	80031de <HAL_RCC_OscConfig+0x34e>
 80031fa:	e050      	b.n	800329e <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80031fc:	f7ff fbe3 	bl	80029c6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fd fde6 	bl	8000dd0 <HAL_GetTick>
 8003204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003206:	e00b      	b.n	8003220 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003208:	f7fd fde2 	bl	8000dd0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d904      	bls.n	8003220 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e1ca      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
 800321a:	bf00      	nop
 800321c:	20000018 	.word	0x20000018
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003220:	f7ff fbf3 	bl	8002a0a <LL_RCC_LSI1_IsReady>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0ee      	beq.n	8003208 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800322a:	f7ff fc11 	bl	8002a50 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003230:	f7fd fdce 	bl	8000dd0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b03      	cmp	r3, #3
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1b6      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003242:	f7ff fc16 	bl	8002a72 <LL_RCC_LSI2_IsReady>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f1      	bne.n	8003230 <HAL_RCC_OscConfig+0x3a0>
 800324c:	e027      	b.n	800329e <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800324e:	f7ff fbff 	bl	8002a50 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003252:	f7fd fdbd 	bl	8000dd0 <HAL_GetTick>
 8003256:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800325a:	f7fd fdb9 	bl	8000dd0 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1a1      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800326c:	f7ff fc01 	bl	8002a72 <LL_RCC_LSI2_IsReady>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f1      	bne.n	800325a <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003276:	f7ff fbb7 	bl	80029e8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327a:	f7fd fda9 	bl	8000dd0 <HAL_GetTick>
 800327e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003282:	f7fd fda5 	bl	8000dd0 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e18d      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003294:	f7ff fbb9 	bl	8002a0a <LL_RCC_LSI1_IsReady>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f1      	bne.n	8003282 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d05b      	beq.n	8003362 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032aa:	4bb5      	ldr	r3, [pc, #724]	; (8003580 <HAL_RCC_OscConfig+0x6f0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d114      	bne.n	80032e0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80032b6:	f7ff fa39 	bl	800272c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fd fd89 	bl	8000dd0 <HAL_GetTick>
 80032be:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fd fd85 	bl	8000dd0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e16d      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d4:	4baa      	ldr	r3, [pc, #680]	; (8003580 <HAL_RCC_OscConfig+0x6f0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d102      	bne.n	80032ee <HAL_RCC_OscConfig+0x45e>
 80032e8:	f7ff fb17 	bl	800291a <LL_RCC_LSE_Enable>
 80032ec:	e00c      	b.n	8003308 <HAL_RCC_OscConfig+0x478>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d104      	bne.n	8003300 <HAL_RCC_OscConfig+0x470>
 80032f6:	f7ff fb32 	bl	800295e <LL_RCC_LSE_EnableBypass>
 80032fa:	f7ff fb0e 	bl	800291a <LL_RCC_LSE_Enable>
 80032fe:	e003      	b.n	8003308 <HAL_RCC_OscConfig+0x478>
 8003300:	f7ff fb1c 	bl	800293c <LL_RCC_LSE_Disable>
 8003304:	f7ff fb3c 	bl	8002980 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d014      	beq.n	800333a <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7fd fd5e 	bl	8000dd0 <HAL_GetTick>
 8003314:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003316:	e00a      	b.n	800332e <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7fd fd5a 	bl	8000dd0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e140      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 800332e:	f7ff fb38 	bl	80029a2 <LL_RCC_LSE_IsReady>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ef      	beq.n	8003318 <HAL_RCC_OscConfig+0x488>
 8003338:	e013      	b.n	8003362 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fd fd49 	bl	8000dd0 <HAL_GetTick>
 800333e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fd fd45 	bl	8000dd0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e12b      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003358:	f7ff fb23 	bl	80029a2 <LL_RCC_LSE_IsReady>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ef      	bne.n	8003342 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d02c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d014      	beq.n	80033a0 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003376:	f7ff fa9c 	bl	80028b2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fd fd29 	bl	8000dd0 <HAL_GetTick>
 800337e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003382:	f7fd fd25 	bl	8000dd0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e10d      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003394:	f7ff faaf 	bl	80028f6 <LL_RCC_HSI48_IsReady>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f1      	beq.n	8003382 <HAL_RCC_OscConfig+0x4f2>
 800339e:	e013      	b.n	80033c8 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033a0:	f7ff fa98 	bl	80028d4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fd fd14 	bl	8000dd0 <HAL_GetTick>
 80033a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ac:	f7fd fd10 	bl	8000dd0 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0f8      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80033be:	f7ff fa9a 	bl	80028f6 <LL_RCC_HSI48_IsReady>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f1      	bne.n	80033ac <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80ee 	beq.w	80035ae <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033d2:	f7ff fbf8 	bl	8002bc6 <LL_RCC_GetSysClkSource>
 80033d6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80033d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	f040 80af 	bne.w	8003548 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0203 	and.w	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d123      	bne.n	8003440 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d11c      	bne.n	8003440 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003412:	429a      	cmp	r2, r3
 8003414:	d114      	bne.n	8003440 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d10d      	bne.n	8003440 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d05d      	beq.n	80034fc <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d058      	beq.n	80034f8 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0ab      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003458:	f7ff fc6b 	bl	8002d32 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800345c:	f7fd fcb8 	bl	8000dd0 <HAL_GetTick>
 8003460:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd fcb4 	bl	8000dd0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e09c      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ef      	bne.n	8003464 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <HAL_RCC_OscConfig+0x6f4>)
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003496:	4311      	orrs	r1, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800349c:	0212      	lsls	r2, r2, #8
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034a4:	4311      	orrs	r1, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034b0:	430a      	orrs	r2, r1
 80034b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034b6:	4313      	orrs	r3, r2
 80034b8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034ba:	f7ff fc2b 	bl	8002d14 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034ce:	f7fd fc7f 	bl	8000dd0 <HAL_GetTick>
 80034d2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d6:	f7fd fc7b 	bl	8000dd0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e063      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f6:	e05a      	b.n	80035ae <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e059      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d151      	bne.n	80035ae <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800350a:	f7ff fc03 	bl	8002d14 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800351e:	f7fd fc57 	bl	8000dd0 <HAL_GetTick>
 8003522:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003526:	f7fd fc53 	bl	8000dd0 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e03b      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0ef      	beq.n	8003526 <HAL_RCC_OscConfig+0x696>
 8003546:	e032      	b.n	80035ae <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d02d      	beq.n	80035aa <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	f7ff fbf0 	bl	8002d32 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800355c:	f023 0303 	bic.w	r3, r3, #3
 8003560:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003574:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd fc2b 	bl	8000dd0 <HAL_GetTick>
 800357a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800357c:	e00d      	b.n	800359a <HAL_RCC_OscConfig+0x70a>
 800357e:	bf00      	nop
 8003580:	58000400 	.word	0x58000400
 8003584:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fd fc22 	bl	8000dd0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e00a      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ef      	bne.n	8003588 <HAL_RCC_OscConfig+0x6f8>
 80035a8:	e001      	b.n	80035ae <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3734      	adds	r7, #52	; 0x34
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd90      	pop	{r4, r7, pc}

080035b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e12a      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b97      	ldr	r3, [pc, #604]	; (800382c <HAL_RCC_ClockConfig+0x274>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d91b      	bls.n	8003612 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b94      	ldr	r3, [pc, #592]	; (800382c <HAL_RCC_ClockConfig+0x274>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 0207 	bic.w	r2, r3, #7
 80035e2:	4992      	ldr	r1, [pc, #584]	; (800382c <HAL_RCC_ClockConfig+0x274>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ea:	f7fd fbf1 	bl	8000dd0 <HAL_GetTick>
 80035ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035f2:	f7fd fbed 	bl	8000dd0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e10e      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003604:	4b89      	ldr	r3, [pc, #548]	; (800382c <HAL_RCC_ClockConfig+0x274>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d1ef      	bne.n	80035f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fadb 	bl	8002bde <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003628:	f7fd fbd2 	bl	8000dd0 <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003630:	f7fd fbce 	bl	8000dd0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0ef      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003642:	f7ff fbc8 	bl	8002dd6 <LL_RCC_IsActiveFlag_HPRE>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f1      	beq.n	8003630 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d016      	beq.n	8003686 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fad2 	bl	8002c06 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003662:	f7fd fbb5 	bl	8000dd0 <HAL_GetTick>
 8003666:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800366a:	f7fd fbb1 	bl	8000dd0 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0d2      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800367c:	f7ff fbbd 	bl	8002dfa <LL_RCC_IsActiveFlag_C2HPRE>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f1      	beq.n	800366a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d016      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff facb 	bl	8002c32 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800369c:	f7fd fb98 	bl	8000dd0 <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036a4:	f7fd fb94 	bl	8000dd0 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0b5      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80036b6:	f7ff fbb3 	bl	8002e20 <LL_RCC_IsActiveFlag_SHDHPRE>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f1      	beq.n	80036a4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d016      	beq.n	80036fa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fac5 	bl	8002c60 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036d6:	f7fd fb7b 	bl	8000dd0 <HAL_GetTick>
 80036da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036de:	f7fd fb77 	bl	8000dd0 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e098      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80036f0:	f7ff fba9 	bl	8002e46 <LL_RCC_IsActiveFlag_PPRE1>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f1      	beq.n	80036de <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d017      	beq.n	8003736 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fabb 	bl	8002c88 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003712:	f7fd fb5d 	bl	8000dd0 <HAL_GetTick>
 8003716:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800371a:	f7fd fb59 	bl	8000dd0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e07a      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800372c:	f7ff fb9d 	bl	8002e6a <LL_RCC_IsActiveFlag_PPRE2>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f1      	beq.n	800371a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d043      	beq.n	80037ca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d106      	bne.n	8003758 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800374a:	f7ff f85b 	bl	8002804 <LL_RCC_HSE_IsReady>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d11e      	bne.n	8003792 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e064      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d106      	bne.n	800376e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003760:	f7ff faf6 	bl	8002d50 <LL_RCC_PLL_IsReady>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d113      	bne.n	8003792 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e059      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003776:	f7ff f9c3 	bl	8002b00 <LL_RCC_MSI_IsReady>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d108      	bne.n	8003792 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04e      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003784:	f7ff f86e 	bl	8002864 <LL_RCC_HSI_IsReady>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e047      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fa01 	bl	8002b9e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379c:	f7fd fb18 	bl	8000dd0 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fd fb14 	bl	8000dd0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e033      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	f7ff fa04 	bl	8002bc6 <LL_RCC_GetSysClkSource>
 80037be:	4602      	mov	r2, r0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d1ec      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037ca:	4b18      	ldr	r3, [pc, #96]	; (800382c <HAL_RCC_ClockConfig+0x274>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d21b      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <HAL_RCC_ClockConfig+0x274>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 0207 	bic.w	r2, r3, #7
 80037e0:	4912      	ldr	r1, [pc, #72]	; (800382c <HAL_RCC_ClockConfig+0x274>)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e8:	f7fd faf2 	bl	8000dd0 <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037f0:	f7fd faee 	bl	8000dd0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_RCC_ClockConfig+0x274>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d1ef      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8003810:	f7fd f996 	bl	8000b40 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003814:	f7fd fae8 	bl	8000de8 <HAL_GetTickPrio>
 8003818:	4603      	mov	r3, r0
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd fa8a 	bl	8000d34 <HAL_InitTick>
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	58004000 	.word	0x58004000

08003830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003836:	f7ff f9c6 	bl	8002bc6 <LL_RCC_GetSysClkSource>
 800383a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003842:	f7ff f982 	bl	8002b4a <LL_RCC_MSI_GetRange>
 8003846:	4603      	mov	r3, r0
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e04a      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b04      	cmp	r3, #4
 800385c:	d102      	bne.n	8003864 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800385e:	4b27      	ldr	r3, [pc, #156]	; (80038fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e044      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b08      	cmp	r3, #8
 8003868:	d10a      	bne.n	8003880 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800386a:	f7fe ff7d 	bl	8002768 <LL_RCC_HSE_IsEnabledDiv2>
 800386e:	4603      	mov	r3, r0
 8003870:	2b01      	cmp	r3, #1
 8003872:	d102      	bne.n	800387a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003874:	4b21      	ldr	r3, [pc, #132]	; (80038fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e039      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCC_GetSysClockFreq+0xd0>)
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e036      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003880:	f7ff fa9d 	bl	8002dbe <LL_RCC_PLL_GetMainSource>
 8003884:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d002      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x62>
 800388c:	2b03      	cmp	r3, #3
 800388e:	d003      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x68>
 8003890:	e00d      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003892:	4b1a      	ldr	r3, [pc, #104]	; (80038fc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003894:	60bb      	str	r3, [r7, #8]
        break;
 8003896:	e015      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003898:	f7fe ff66 	bl	8002768 <LL_RCC_HSE_IsEnabledDiv2>
 800389c:	4603      	mov	r3, r0
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d102      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80038a2:	4b16      	ldr	r3, [pc, #88]	; (80038fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80038a4:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80038a6:	e00d      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038aa:	60bb      	str	r3, [r7, #8]
        break;
 80038ac:	e00a      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80038ae:	f7ff f94c 	bl	8002b4a <LL_RCC_MSI_GetRange>
 80038b2:	4603      	mov	r3, r0
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	4a0f      	ldr	r2, [pc, #60]	; (80038f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80038bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c0:	60bb      	str	r3, [r7, #8]
        break;
 80038c2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80038c4:	f7ff fa56 	bl	8002d74 <LL_RCC_PLL_GetN>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	fb03 f402 	mul.w	r4, r3, r2
 80038d0:	f7ff fa69 	bl	8002da6 <LL_RCC_PLL_GetDivider>
 80038d4:	4603      	mov	r3, r0
 80038d6:	091b      	lsrs	r3, r3, #4
 80038d8:	3301      	adds	r3, #1
 80038da:	fbb4 f4f3 	udiv	r4, r4, r3
 80038de:	f7ff fa56 	bl	8002d8e <LL_RCC_PLL_GetR>
 80038e2:	4603      	mov	r3, r0
 80038e4:	0f5b      	lsrs	r3, r3, #29
 80038e6:	3301      	adds	r3, #1
 80038e8:	fbb4 f3f3 	udiv	r3, r4, r3
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80038ee:	68fb      	ldr	r3, [r7, #12]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd90      	pop	{r4, r7, pc}
 80038f8:	08004f5c 	.word	0x08004f5c
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	01e84800 	.word	0x01e84800

08003904 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003904:	b598      	push	{r3, r4, r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003908:	f7ff ff92 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 800390c:	4604      	mov	r4, r0
 800390e:	f7ff f9cf 	bl	8002cb0 <LL_RCC_GetAHBPrescaler>
 8003912:	4603      	mov	r3, r0
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	4a03      	ldr	r2, [pc, #12]	; (8003928 <HAL_RCC_GetHCLKFreq+0x24>)
 800391c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003920:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd98      	pop	{r3, r4, r7, pc}
 8003928:	08004efc 	.word	0x08004efc

0800392c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800392c:	b598      	push	{r3, r4, r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003930:	f7ff ffe8 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003934:	4604      	mov	r4, r0
 8003936:	f7ff f9d5 	bl	8002ce4 <LL_RCC_GetAPB1Prescaler>
 800393a:	4603      	mov	r3, r0
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	4a04      	ldr	r2, [pc, #16]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd98      	pop	{r3, r4, r7, pc}
 8003954:	08004f3c 	.word	0x08004f3c

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b598      	push	{r3, r4, r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800395c:	f7ff ffd2 	bl	8003904 <HAL_RCC_GetHCLKFreq>
 8003960:	4604      	mov	r4, r0
 8003962:	f7ff f9cb 	bl	8002cfc <LL_RCC_GetAPB2Prescaler>
 8003966:	4603      	mov	r3, r0
 8003968:	0adb      	lsrs	r3, r3, #11
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	4a04      	ldr	r2, [pc, #16]	; (8003980 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa24 f303 	lsr.w	r3, r4, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd98      	pop	{r3, r4, r7, pc}
 8003980:	08004f3c 	.word	0x08004f3c

08003984 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2bb0      	cmp	r3, #176	; 0xb0
 8003990:	d903      	bls.n	800399a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e007      	b.n	80039aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80039a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80039aa:	f7ff f98d 	bl	8002cc8 <LL_RCC_GetAHB4Prescaler>
 80039ae:	4603      	mov	r3, r0
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	4a0d      	ldr	r2, [pc, #52]	; (80039ec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80039b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80039c8:	fba2 2303 	umull	r2, r3, r2, r3
 80039cc:	0c9c      	lsrs	r4, r3, #18
 80039ce:	f7fe febd 	bl	800274c <HAL_PWREx_GetVoltageRange>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4619      	mov	r1, r3
 80039d6:	4620      	mov	r0, r4
 80039d8:	f000 f80c 	bl	80039f4 <RCC_SetFlashLatency>
 80039dc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd90      	pop	{r4, r7, pc}
 80039e6:	bf00      	nop
 80039e8:	08004f5c 	.word	0x08004f5c
 80039ec:	08004efc 	.word	0x08004efc
 80039f0:	431bde83 	.word	0x431bde83

080039f4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b093      	sub	sp, #76	; 0x4c
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80039fe:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <RCC_SetFlashLatency+0xf0>)
 8003a00:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003a0a:	4a37      	ldr	r2, [pc, #220]	; (8003ae8 <RCC_SetFlashLatency+0xf4>)
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003a16:	4b35      	ldr	r3, [pc, #212]	; (8003aec <RCC_SetFlashLatency+0xf8>)
 8003a18:	f107 040c 	add.w	r4, r7, #12
 8003a1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003a22:	2300      	movs	r3, #0
 8003a24:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a2c:	d11c      	bne.n	8003a68 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	643b      	str	r3, [r7, #64]	; 0x40
 8003a32:	e015      	b.n	8003a60 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d808      	bhi.n	8003a5a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a50:	4413      	add	r3, r2
 8003a52:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003a56:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003a58:	e022      	b.n	8003aa0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d9e6      	bls.n	8003a34 <RCC_SetFlashLatency+0x40>
 8003a66:	e01b      	b.n	8003aa0 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6c:	e015      	b.n	8003a9a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a76:	4413      	add	r3, r2
 8003a78:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d808      	bhi.n	8003a94 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003a92:	e005      	b.n	8003aa0 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a96:	3301      	adds	r3, #1
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d9e6      	bls.n	8003a6e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <RCC_SetFlashLatency+0xfc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f023 0207 	bic.w	r2, r3, #7
 8003aa8:	4911      	ldr	r1, [pc, #68]	; (8003af0 <RCC_SetFlashLatency+0xfc>)
 8003aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ab0:	f7fd f98e 	bl	8000dd0 <HAL_GetTick>
 8003ab4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ab6:	e008      	b.n	8003aca <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ab8:	f7fd f98a 	bl	8000dd0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e007      	b.n	8003ada <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <RCC_SetFlashLatency+0xfc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1ef      	bne.n	8003ab8 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	374c      	adds	r7, #76	; 0x4c
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	08004ea0 	.word	0x08004ea0
 8003ae8:	08004eb0 	.word	0x08004eb0
 8003aec:	08004ebc 	.word	0x08004ebc
 8003af0:	58004000 	.word	0x58004000

08003af4 <LL_RCC_LSE_IsEnabled>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <LL_RCC_LSE_IsEnabled+0x18>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <LL_RCC_LSE_IsEnabled+0x1a>
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_RCC_LSE_IsReady>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d101      	bne.n	8003b30 <LL_RCC_LSE_IsReady+0x18>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <LL_RCC_LSE_IsReady+0x1a>
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_RCC_MSI_EnablePLLMode>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4a:	f043 0304 	orr.w	r3, r3, #4
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_SetRFWKPClockSource>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_RCC_SetSMPSClockSource>:
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	f023 0203 	bic.w	r2, r3, #3
 8003b98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_RCC_SetSMPSPrescaler>:
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_RCC_SetUSARTClockSource>:
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f023 0203 	bic.w	r2, r3, #3
 8003bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_RCC_SetLPUARTClockSource>:
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <LL_RCC_SetI2CClockSource>:
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003c46:	43db      	mvns	r3, r3
 8003c48:	401a      	ands	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_RCC_SetLPTIMClockSource>:
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0c1b      	lsrs	r3, r3, #16
 8003c7c:	041b      	lsls	r3, r3, #16
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	401a      	ands	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	041b      	lsls	r3, r3, #16
 8003c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_SetSAIClockSource>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_RCC_SetRNGClockSource>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_RCC_SetCLK48ClockSource>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_RCC_SetUSBClockSource>:
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ffe3 	bl	8003cf4 <LL_RCC_SetCLK48ClockSource>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <LL_RCC_SetADCClockSource>:
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <LL_RCC_SetRTCClockSource>:
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <LL_RCC_GetRTCClockSource>:
{
 8003d8e:	b480      	push	{r7}
 8003d90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_ForceBackupDomainReset>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_RCC_ReleaseBackupDomainReset>:
{
 8003dca:	b480      	push	{r7}
 8003dcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_RCC_PLLSAI1_Enable>:
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dfe:	6013      	str	r3, [r2, #0]
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_RCC_PLLSAI1_Disable>:
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e1c:	6013      	str	r3, [r2, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_RCC_PLLSAI1_IsReady>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e3a:	d101      	bne.n	8003e40 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003e54:	2300      	movs	r3, #0
 8003e56:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d033      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e70:	d00c      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e76:	d802      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e7c:	e017      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e82:	d017      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003e84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e88:	d016      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003e8a:	e010      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e9c:	e00d      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f94d 	bl	8004142 <RCCEx_PLLSAI1_ConfigNP>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003eac:	e005      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	77fb      	strb	r3, [r7, #31]
        break;
 8003eb2:	e002      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003eb4:	bf00      	nop
 8003eb6:	e000      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eba:	7ffb      	ldrb	r3, [r7, #31]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fee9 	bl	8003c9c <LL_RCC_SetSAIClockSource>
 8003eca:	e001      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	7ffb      	ldrb	r3, [r7, #31]
 8003ece:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d046      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003edc:	f7ff ff57 	bl	8003d8e <LL_RCC_GetRTCClockSource>
 8003ee0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d03c      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003eec:	f7fe fc1e 	bl	800272c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ff31 	bl	8003d62 <LL_RCC_SetRTCClockSource>
 8003f00:	e02e      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003f0c:	f7ff ff4c 	bl	8003da8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003f10:	f7ff ff5b 	bl	8003dca <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003f2c:	f7ff fde2 	bl	8003af4 <LL_RCC_LSE_IsEnabled>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d114      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f36:	f7fc ff4b 	bl	8000dd0 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f3c:	e00b      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3e:	f7fc ff47 	bl	8000dd0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d902      	bls.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	77fb      	strb	r3, [r7, #31]
              break;
 8003f54:	e004      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f56:	f7ff fddf 	bl	8003b18 <LL_RCC_LSE_IsReady>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d1ee      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003f60:	7ffb      	ldrb	r3, [r7, #31]
 8003f62:	77bb      	strb	r3, [r7, #30]
 8003f64:	e001      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f66:	7ffb      	ldrb	r3, [r7, #31]
 8003f68:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fe2b 	bl	8003bd6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fe36 	bl	8003c02 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d004      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fe5e 	bl	8003c68 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d004      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fe53 	bl	8003c68 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fe2b 	bl	8003c2e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0308 	and.w	r3, r3, #8
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fe20 	bl	8003c2e <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d022      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fe8e 	bl	8003d20 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400c:	d107      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004026:	d10b      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f000 f8e3 	bl	80041f8 <RCCEx_PLLSAI1_ConfigNQ>
 8004032:	4603      	mov	r3, r0
 8004034:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004036:	7ffb      	ldrb	r3, [r7, #31]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800403c:	7ffb      	ldrb	r3, [r7, #31]
 800403e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02b      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d008      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800405e:	d003      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d105      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fe2b 	bl	8003cc8 <LL_RCC_SetRNGClockSource>
 8004072:	e00a      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	2000      	movs	r0, #0
 8004080:	f7ff fe22 	bl	8003cc8 <LL_RCC_SetRNGClockSource>
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7ff fe35 	bl	8003cf4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004092:	d107      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800409e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d022      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fe3e 	bl	8003d36 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040c2:	d107      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040dc:	d10b      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f8e3 	bl	80042ae <RCCEx_PLLSAI1_ConfigNR>
 80040e8:	4603      	mov	r3, r0
 80040ea:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80040ec:	7ffb      	ldrb	r3, [r7, #31]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80040f2:	7ffb      	ldrb	r3, [r7, #31]
 80040f4:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff fd27 	bl	8003b5a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff fd46 	bl	8003bae <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fd2d 	bl	8003b86 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 800412c:	7fbb      	ldrb	r3, [r7, #30]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800413a:	f7ff fcff 	bl	8003b3c <LL_RCC_MSI_EnablePLLMode>
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}

08004142 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800414e:	f7ff fe5c 	bl	8003e0a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004152:	f7fc fe3d 	bl	8000dd0 <HAL_GetTick>
 8004156:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004158:	e009      	b.n	800416e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800415a:	f7fc fe39 	bl	8000dd0 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d902      	bls.n	800416e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	73fb      	strb	r3, [r7, #15]
      break;
 800416c:	e004      	b.n	8004178 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800416e:	f7ff fe5b 	bl	8003e28 <LL_RCC_PLLSAI1_IsReady>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f0      	bne.n	800415a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d137      	bne.n	80041ee <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	021b      	lsls	r3, r3, #8
 800418e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004192:	4313      	orrs	r3, r2
 8004194:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a8:	4313      	orrs	r3, r2
 80041aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80041ac:	f7ff fe1e 	bl	8003dec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fc fe0e 	bl	8000dd0 <HAL_GetTick>
 80041b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041b6:	e009      	b.n	80041cc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041b8:	f7fc fe0a 	bl	8000dd0 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d902      	bls.n	80041cc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	73fb      	strb	r3, [r7, #15]
        break;
 80041ca:	e004      	b.n	80041d6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041cc:	f7ff fe2c 	bl	8003e28 <LL_RCC_PLLSAI1_IsReady>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d1f0      	bne.n	80041b8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d108      	bne.n	80041ee <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ea:	4313      	orrs	r3, r2
 80041ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004200:	2300      	movs	r3, #0
 8004202:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004204:	f7ff fe01 	bl	8003e0a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004208:	f7fc fde2 	bl	8000dd0 <HAL_GetTick>
 800420c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800420e:	e009      	b.n	8004224 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004210:	f7fc fdde 	bl	8000dd0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d902      	bls.n	8004224 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	73fb      	strb	r3, [r7, #15]
      break;
 8004222:	e004      	b.n	800422e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004224:	f7ff fe00 	bl	8003e28 <LL_RCC_PLLSAI1_IsReady>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d137      	bne.n	80042a4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004248:	4313      	orrs	r3, r2
 800424a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800425e:	4313      	orrs	r3, r2
 8004260:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004262:	f7ff fdc3 	bl	8003dec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004266:	f7fc fdb3 	bl	8000dd0 <HAL_GetTick>
 800426a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800426c:	e009      	b.n	8004282 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800426e:	f7fc fdaf 	bl	8000dd0 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d902      	bls.n	8004282 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	73fb      	strb	r3, [r7, #15]
        break;
 8004280:	e004      	b.n	800428c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004282:	f7ff fdd1 	bl	8003e28 <LL_RCC_PLLSAI1_IsReady>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d1f0      	bne.n	800426e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d108      	bne.n	80042a4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042a0:	4313      	orrs	r3, r2
 80042a2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042ba:	f7ff fda6 	bl	8003e0a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042be:	f7fc fd87 	bl	8000dd0 <HAL_GetTick>
 80042c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042c4:	e009      	b.n	80042da <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c6:	f7fc fd83 	bl	8000dd0 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d902      	bls.n	80042da <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	73fb      	strb	r3, [r7, #15]
      break;
 80042d8:	e004      	b.n	80042e4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042da:	f7ff fda5 	bl	8003e28 <LL_RCC_PLLSAI1_IsReady>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d137      	bne.n	800435a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	021b      	lsls	r3, r3, #8
 80042fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004314:	4313      	orrs	r3, r2
 8004316:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004318:	f7ff fd68 	bl	8003dec <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431c:	f7fc fd58 	bl	8000dd0 <HAL_GetTick>
 8004320:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004322:	e009      	b.n	8004338 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004324:	f7fc fd54 	bl	8000dd0 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d902      	bls.n	8004338 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	73fb      	strb	r3, [r7, #15]
        break;
 8004336:	e004      	b.n	8004342 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004338:	f7ff fd76 	bl	8003e28 <LL_RCC_PLLSAI1_IsReady>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d1f0      	bne.n	8004324 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004356:	4313      	orrs	r3, r2
 8004358:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <LL_RCC_GetUSARTClockSource>:
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800436c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004370:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4013      	ands	r3, r2
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_RCC_GetLPUARTClockSource>:
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4013      	ands	r3, r2
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e042      	b.n	800443c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d106      	bne.n	80043ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fc fad5 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2224      	movs	r2, #36	; 0x24
 80043d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f82c 	bl	8004444 <UART_SetConfig>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e022      	b.n	800443c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa2e 	bl	8004860 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fab5 	bl	80049a4 <UART_CheckIdleState>
 800443a:	4603      	mov	r3, r0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004444:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004448:	b088      	sub	sp, #32
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	431a      	orrs	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4313      	orrs	r3, r2
 8004468:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	4313      	orrs	r3, r2
 8004472:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4ba4      	ldr	r3, [pc, #656]	; (800470c <UART_SetConfig+0x2c8>)
 800447c:	4013      	ands	r3, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	69f9      	ldr	r1, [r7, #28]
 8004484:	430b      	orrs	r3, r1
 8004486:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a99      	ldr	r2, [pc, #612]	; (8004710 <UART_SetConfig+0x2cc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	69fa      	ldr	r2, [r7, #28]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80044c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6812      	ldr	r2, [r2, #0]
 80044ca:	69f9      	ldr	r1, [r7, #28]
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	f023 010f 	bic.w	r1, r3, #15
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a8a      	ldr	r2, [pc, #552]	; (8004714 <UART_SetConfig+0x2d0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d121      	bne.n	8004534 <UART_SetConfig+0xf0>
 80044f0:	2003      	movs	r0, #3
 80044f2:	f7ff ff37 	bl	8004364 <LL_RCC_GetUSARTClockSource>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d817      	bhi.n	800452c <UART_SetConfig+0xe8>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0xc0>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004515 	.word	0x08004515
 8004508:	08004521 	.word	0x08004521
 800450c:	0800451b 	.word	0x0800451b
 8004510:	08004527 	.word	0x08004527
 8004514:	2301      	movs	r3, #1
 8004516:	76fb      	strb	r3, [r7, #27]
 8004518:	e038      	b.n	800458c <UART_SetConfig+0x148>
 800451a:	2302      	movs	r3, #2
 800451c:	76fb      	strb	r3, [r7, #27]
 800451e:	e035      	b.n	800458c <UART_SetConfig+0x148>
 8004520:	2304      	movs	r3, #4
 8004522:	76fb      	strb	r3, [r7, #27]
 8004524:	e032      	b.n	800458c <UART_SetConfig+0x148>
 8004526:	2308      	movs	r3, #8
 8004528:	76fb      	strb	r3, [r7, #27]
 800452a:	e02f      	b.n	800458c <UART_SetConfig+0x148>
 800452c:	2310      	movs	r3, #16
 800452e:	76fb      	strb	r3, [r7, #27]
 8004530:	bf00      	nop
 8004532:	e02b      	b.n	800458c <UART_SetConfig+0x148>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a75      	ldr	r2, [pc, #468]	; (8004710 <UART_SetConfig+0x2cc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d124      	bne.n	8004588 <UART_SetConfig+0x144>
 800453e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004542:	f7ff ff1f 	bl	8004384 <LL_RCC_GetLPUARTClockSource>
 8004546:	4603      	mov	r3, r0
 8004548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800454c:	d012      	beq.n	8004574 <UART_SetConfig+0x130>
 800454e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004552:	d802      	bhi.n	800455a <UART_SetConfig+0x116>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <UART_SetConfig+0x124>
 8004558:	e012      	b.n	8004580 <UART_SetConfig+0x13c>
 800455a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455e:	d006      	beq.n	800456e <UART_SetConfig+0x12a>
 8004560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004564:	d009      	beq.n	800457a <UART_SetConfig+0x136>
 8004566:	e00b      	b.n	8004580 <UART_SetConfig+0x13c>
 8004568:	2300      	movs	r3, #0
 800456a:	76fb      	strb	r3, [r7, #27]
 800456c:	e00e      	b.n	800458c <UART_SetConfig+0x148>
 800456e:	2302      	movs	r3, #2
 8004570:	76fb      	strb	r3, [r7, #27]
 8004572:	e00b      	b.n	800458c <UART_SetConfig+0x148>
 8004574:	2304      	movs	r3, #4
 8004576:	76fb      	strb	r3, [r7, #27]
 8004578:	e008      	b.n	800458c <UART_SetConfig+0x148>
 800457a:	2308      	movs	r3, #8
 800457c:	76fb      	strb	r3, [r7, #27]
 800457e:	e005      	b.n	800458c <UART_SetConfig+0x148>
 8004580:	2310      	movs	r3, #16
 8004582:	76fb      	strb	r3, [r7, #27]
 8004584:	bf00      	nop
 8004586:	e001      	b.n	800458c <UART_SetConfig+0x148>
 8004588:	2310      	movs	r3, #16
 800458a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a5f      	ldr	r2, [pc, #380]	; (8004710 <UART_SetConfig+0x2cc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	f040 808e 	bne.w	80046b4 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004598:	7efb      	ldrb	r3, [r7, #27]
 800459a:	2b08      	cmp	r3, #8
 800459c:	d823      	bhi.n	80045e6 <UART_SetConfig+0x1a2>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0x160>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045d7 	.word	0x080045d7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	080045e7 	.word	0x080045e7
 80045c4:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c8:	f7ff f9b0 	bl	800392c <HAL_RCC_GetPCLK1Freq>
 80045cc:	6178      	str	r0, [r7, #20]
        break;
 80045ce:	e00f      	b.n	80045f0 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b51      	ldr	r3, [pc, #324]	; (8004718 <UART_SetConfig+0x2d4>)
 80045d2:	617b      	str	r3, [r7, #20]
        break;
 80045d4:	e00c      	b.n	80045f0 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7ff f92b 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 80045da:	6178      	str	r0, [r7, #20]
        break;
 80045dc:	e008      	b.n	80045f0 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	617b      	str	r3, [r7, #20]
        break;
 80045e4:	e004      	b.n	80045f0 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	76bb      	strb	r3, [r7, #26]
        break;
 80045ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 811c 	beq.w	8004830 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	4a47      	ldr	r2, [pc, #284]	; (800471c <UART_SetConfig+0x2d8>)
 80045fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004602:	461a      	mov	r2, r3
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	fbb3 f3f2 	udiv	r3, r3, r2
 800460a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	429a      	cmp	r2, r3
 800461a:	d305      	bcc.n	8004628 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	429a      	cmp	r2, r3
 8004626:	d902      	bls.n	800462e <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	76bb      	strb	r3, [r7, #26]
 800462c:	e100      	b.n	8004830 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	4618      	mov	r0, r3
 8004632:	f04f 0100 	mov.w	r1, #0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	4a38      	ldr	r2, [pc, #224]	; (800471c <UART_SetConfig+0x2d8>)
 800463c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004640:	b29b      	uxth	r3, r3
 8004642:	f04f 0400 	mov.w	r4, #0
 8004646:	461a      	mov	r2, r3
 8004648:	4623      	mov	r3, r4
 800464a:	f7fb fd97 	bl	800017c <__aeabi_uldivmod>
 800464e:	4603      	mov	r3, r0
 8004650:	460c      	mov	r4, r1
 8004652:	4619      	mov	r1, r3
 8004654:	4622      	mov	r2, r4
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	f04f 0400 	mov.w	r4, #0
 800465e:	0214      	lsls	r4, r2, #8
 8004660:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004664:	020b      	lsls	r3, r1, #8
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6852      	ldr	r2, [r2, #4]
 800466a:	0852      	lsrs	r2, r2, #1
 800466c:	4611      	mov	r1, r2
 800466e:	f04f 0200 	mov.w	r2, #0
 8004672:	eb13 0b01 	adds.w	fp, r3, r1
 8004676:	eb44 0c02 	adc.w	ip, r4, r2
 800467a:	4658      	mov	r0, fp
 800467c:	4661      	mov	r1, ip
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f04f 0400 	mov.w	r4, #0
 8004686:	461a      	mov	r2, r3
 8004688:	4623      	mov	r3, r4
 800468a:	f7fb fd77 	bl	800017c <__aeabi_uldivmod>
 800468e:	4603      	mov	r3, r0
 8004690:	460c      	mov	r4, r1
 8004692:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469a:	d308      	bcc.n	80046ae <UART_SetConfig+0x26a>
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a2:	d204      	bcs.n	80046ae <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	e0c0      	b.n	8004830 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	76bb      	strb	r3, [r7, #26]
 80046b2:	e0bd      	b.n	8004830 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046bc:	d169      	bne.n	8004792 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80046be:	7efb      	ldrb	r3, [r7, #27]
 80046c0:	3b01      	subs	r3, #1
 80046c2:	2b07      	cmp	r3, #7
 80046c4:	d82c      	bhi.n	8004720 <UART_SetConfig+0x2dc>
 80046c6:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0x288>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	080046ed 	.word	0x080046ed
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	08004721 	.word	0x08004721
 80046d8:	080046fb 	.word	0x080046fb
 80046dc:	08004721 	.word	0x08004721
 80046e0:	08004721 	.word	0x08004721
 80046e4:	08004721 	.word	0x08004721
 80046e8:	08004703 	.word	0x08004703
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ec:	f7ff f934 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 80046f0:	6178      	str	r0, [r7, #20]
        break;
 80046f2:	e01a      	b.n	800472a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f4:	4b08      	ldr	r3, [pc, #32]	; (8004718 <UART_SetConfig+0x2d4>)
 80046f6:	617b      	str	r3, [r7, #20]
        break;
 80046f8:	e017      	b.n	800472a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fa:	f7ff f899 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 80046fe:	6178      	str	r0, [r7, #20]
        break;
 8004700:	e013      	b.n	800472a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	617b      	str	r3, [r7, #20]
        break;
 8004708:	e00f      	b.n	800472a <UART_SetConfig+0x2e6>
 800470a:	bf00      	nop
 800470c:	cfff69f3 	.word	0xcfff69f3
 8004710:	40008000 	.word	0x40008000
 8004714:	40013800 	.word	0x40013800
 8004718:	00f42400 	.word	0x00f42400
 800471c:	08004f9c 	.word	0x08004f9c
      default:
        pclk = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	76bb      	strb	r3, [r7, #26]
        break;
 8004728:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d07f      	beq.n	8004830 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	4a48      	ldr	r2, [pc, #288]	; (8004858 <UART_SetConfig+0x414>)
 8004736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800473a:	461a      	mov	r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004742:	005a      	lsls	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	085b      	lsrs	r3, r3, #1
 800474a:	441a      	add	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	b29b      	uxth	r3, r3
 8004756:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d916      	bls.n	800478c <UART_SetConfig+0x348>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d212      	bcs.n	800478c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f023 030f 	bic.w	r3, r3, #15
 800476e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	b29b      	uxth	r3, r3
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	b29a      	uxth	r2, r3
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	4313      	orrs	r3, r2
 8004780:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	89fa      	ldrh	r2, [r7, #14]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	e051      	b.n	8004830 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	76bb      	strb	r3, [r7, #26]
 8004790:	e04e      	b.n	8004830 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004792:	7efb      	ldrb	r3, [r7, #27]
 8004794:	3b01      	subs	r3, #1
 8004796:	2b07      	cmp	r3, #7
 8004798:	d821      	bhi.n	80047de <UART_SetConfig+0x39a>
 800479a:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0x35c>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047c1 	.word	0x080047c1
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047df 	.word	0x080047df
 80047ac:	080047cf 	.word	0x080047cf
 80047b0:	080047df 	.word	0x080047df
 80047b4:	080047df 	.word	0x080047df
 80047b8:	080047df 	.word	0x080047df
 80047bc:	080047d7 	.word	0x080047d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047c0:	f7ff f8ca 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 80047c4:	6178      	str	r0, [r7, #20]
        break;
 80047c6:	e00f      	b.n	80047e8 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c8:	4b24      	ldr	r3, [pc, #144]	; (800485c <UART_SetConfig+0x418>)
 80047ca:	617b      	str	r3, [r7, #20]
        break;
 80047cc:	e00c      	b.n	80047e8 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ce:	f7ff f82f 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 80047d2:	6178      	str	r0, [r7, #20]
        break;
 80047d4:	e008      	b.n	80047e8 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047da:	617b      	str	r3, [r7, #20]
        break;
 80047dc:	e004      	b.n	80047e8 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	76bb      	strb	r3, [r7, #26]
        break;
 80047e6:	bf00      	nop
    }

    if (pclk != 0U)
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d020      	beq.n	8004830 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	4a19      	ldr	r2, [pc, #100]	; (8004858 <UART_SetConfig+0x414>)
 80047f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047f8:	461a      	mov	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	085b      	lsrs	r3, r3, #1
 8004806:	441a      	add	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	b29b      	uxth	r3, r3
 8004812:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d908      	bls.n	800482c <UART_SetConfig+0x3e8>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004820:	d204      	bcs.n	800482c <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	e001      	b.n	8004830 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800484c:	7ebb      	ldrb	r3, [r7, #26]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004858:	08004f9c 	.word	0x08004f9c
 800485c:	00f42400 	.word	0x00f42400

08004860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01a      	beq.n	8004976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495e:	d10a      	bne.n	8004976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049b4:	f7fc fa0c 	bl	8000dd0 <HAL_GetTick>
 80049b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d10e      	bne.n	80049e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f82c 	bl	8004a34 <UART_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e022      	b.n	8004a2c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d10e      	bne.n	8004a12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f816 	bl	8004a34 <UART_WaitOnFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e00c      	b.n	8004a2c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a44:	e062      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d05e      	beq.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4e:	f7fc f9bf 	bl	8000dd0 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11d      	bne.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a72:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e045      	b.n	8004b2c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d02e      	beq.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abc:	d126      	bne.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ad6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e00f      	b.n	8004b2c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	79fb      	ldrb	r3, [r7, #7]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d08d      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_UARTEx_DisableFifoMode+0x16>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e027      	b.n	8004b9a <HAL_UARTEx_DisableFifoMode+0x66>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2224      	movs	r2, #36	; 0x24
 8004b56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e02d      	b.n	8004c1a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2224      	movs	r2, #36	; 0x24
 8004bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f850 	bl	8004ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e02d      	b.n	8004c96 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2224      	movs	r2, #36	; 0x24
 8004c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f812 	bl	8004ca0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2220      	movs	r2, #32
 8004c88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004ca8:	4a2f      	ldr	r2, [pc, #188]	; (8004d68 <UARTEx_SetNbDataToProcess+0xc8>)
 8004caa:	f107 0314 	add.w	r3, r7, #20
 8004cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cb2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004cb6:	4a2d      	ldr	r2, [pc, #180]	; (8004d6c <UARTEx_SetNbDataToProcess+0xcc>)
 8004cb8:	f107 030c 	add.w	r3, r7, #12
 8004cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cc0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d108      	bne.n	8004cde <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cdc:	e03d      	b.n	8004d5a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cde:	2308      	movs	r3, #8
 8004ce0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	0e5b      	lsrs	r3, r3, #25
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	0f5b      	lsrs	r3, r3, #29
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004d06:	7fbb      	ldrb	r3, [r7, #30]
 8004d08:	7f3a      	ldrb	r2, [r7, #28]
 8004d0a:	f107 0120 	add.w	r1, r7, #32
 8004d0e:	440a      	add	r2, r1
 8004d10:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	7f3a      	ldrb	r2, [r7, #28]
 8004d1a:	f107 0120 	add.w	r1, r7, #32
 8004d1e:	440a      	add	r2, r1
 8004d20:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004d24:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004d30:	7ffb      	ldrb	r3, [r7, #31]
 8004d32:	7f7a      	ldrb	r2, [r7, #29]
 8004d34:	f107 0120 	add.w	r1, r7, #32
 8004d38:	440a      	add	r2, r1
 8004d3a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	7f7a      	ldrb	r2, [r7, #29]
 8004d44:	f107 0120 	add.w	r1, r7, #32
 8004d48:	440a      	add	r2, r1
 8004d4a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004d4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d5a:	bf00      	nop
 8004d5c:	3724      	adds	r7, #36	; 0x24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	08004ecc 	.word	0x08004ecc
 8004d6c:	08004ed4 	.word	0x08004ed4

08004d70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d78:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004d7c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004daa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004dae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004dd8:	b084      	sub	sp, #16
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	f107 0014 	add.w	r0, r7, #20
 8004de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff ffb0 	bl	8004d70 <USB_EnableGlobalInt>

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e1c:	b004      	add	sp, #16
 8004e1e:	4770      	bx	lr

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4e0d      	ldr	r6, [pc, #52]	; (8004e58 <__libc_init_array+0x38>)
 8004e24:	4c0d      	ldr	r4, [pc, #52]	; (8004e5c <__libc_init_array+0x3c>)
 8004e26:	1ba4      	subs	r4, r4, r6
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	2500      	movs	r5, #0
 8004e2c:	42a5      	cmp	r5, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	4e0b      	ldr	r6, [pc, #44]	; (8004e60 <__libc_init_array+0x40>)
 8004e32:	4c0c      	ldr	r4, [pc, #48]	; (8004e64 <__libc_init_array+0x44>)
 8004e34:	f000 f820 	bl	8004e78 <_init>
 8004e38:	1ba4      	subs	r4, r4, r6
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	2500      	movs	r5, #0
 8004e3e:	42a5      	cmp	r5, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e48:	4798      	blx	r3
 8004e4a:	3501      	adds	r5, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e52:	4798      	blx	r3
 8004e54:	3501      	adds	r5, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	08004fbc 	.word	0x08004fbc
 8004e5c:	08004fbc 	.word	0x08004fbc
 8004e60:	08004fbc 	.word	0x08004fbc
 8004e64:	08004fc0 	.word	0x08004fc0

08004e68 <memset>:
 8004e68:	4402      	add	r2, r0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d100      	bne.n	8004e72 <memset+0xa>
 8004e70:	4770      	bx	lr
 8004e72:	f803 1b01 	strb.w	r1, [r3], #1
 8004e76:	e7f9      	b.n	8004e6c <memset+0x4>

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
