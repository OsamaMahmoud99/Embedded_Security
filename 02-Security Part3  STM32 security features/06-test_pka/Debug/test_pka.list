
test_pka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d4  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002910  08002910  00003910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080029bc  080029bc  000039bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080029c0  080029c0  000039c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000194  20000008  080029c4  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000012c  2000019c  08002b58  0000419c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002c8  08002b58  000042c8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0000419c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009c47  00000000  00000000  000041cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001a08  00000000  00000000  0000de13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000010b8  00000000  00000000  0000f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000cac  00000000  00000000  000108d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001f9b6  00000000  00000000  00011584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000a91a  00000000  00000000  00030f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000ccbbc  00000000  00000000  0003b854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00108410  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004520  00000000  00000000  00108454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000053  00000000  00000000  0010c974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000019c 	.word	0x2000019c
 8000158:	00000000 	.word	0x00000000
 800015c:	080028f8 	.word	0x080028f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001a0 	.word	0x200001a0
 8000178:	080028f8 	.word	0x080028f8

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000182:	f000 f9cb 	bl	800051c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000186:	f000 f849 	bl	800021c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800018a:	f000 f89f 	bl	80002cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_PKA_Init();
 800018e:	f000 f8bb 	bl	8000308 <MX_PKA_Init>
  /* USER CODE BEGIN 2 */
  in.expSize = sizeof(publicExponent);
 8000192:	2304      	movs	r3, #4
 8000194:	607b      	str	r3, [r7, #4]
  in.OpSize = sizeof(modulus);
 8000196:	2381      	movs	r3, #129	@ 0x81
 8000198:	60bb      	str	r3, [r7, #8]
  in.pExp = publicExponent;
 800019a:	4b19      	ldr	r3, [pc, #100]	@ (8000200 <main+0x84>)
 800019c:	60fb      	str	r3, [r7, #12]
  in.pMod = modulus;
 800019e:	4b19      	ldr	r3, [pc, #100]	@ (8000204 <main+0x88>)
 80001a0:	617b      	str	r3, [r7, #20]
  in.pOp1 = plaintext;
 80001a2:	4b19      	ldr	r3, [pc, #100]	@ (8000208 <main+0x8c>)
 80001a4:	613b      	str	r3, [r7, #16]
  if (HAL_PKA_ModExp(&hpka, &in, 1000) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001ac:	4619      	mov	r1, r3
 80001ae:	4817      	ldr	r0, [pc, #92]	@ (800020c <main+0x90>)
 80001b0:	f000 fb4b 	bl	800084a <HAL_PKA_ModExp>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <main+0x42>
  {
	  Error_Handler();
 80001ba:	f000 f8b9 	bl	8000330 <Error_Handler>
  }

  HAL_PKA_ModExp_GetResult(&hpka, encrypted_data);
 80001be:	4914      	ldr	r1, [pc, #80]	@ (8000210 <main+0x94>)
 80001c0:	4812      	ldr	r0, [pc, #72]	@ (800020c <main+0x90>)
 80001c2:	f000 fb56 	bl	8000872 <HAL_PKA_ModExp_GetResult>

  in.expSize = sizeof(privateExponent);
 80001c6:	2380      	movs	r3, #128	@ 0x80
 80001c8:	607b      	str	r3, [r7, #4]
  in.OpSize = sizeof(modulus);
 80001ca:	2381      	movs	r3, #129	@ 0x81
 80001cc:	60bb      	str	r3, [r7, #8]
  in.pExp = privateExponent;
 80001ce:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <main+0x98>)
 80001d0:	60fb      	str	r3, [r7, #12]
  in.pMod = modulus;
 80001d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000204 <main+0x88>)
 80001d4:	617b      	str	r3, [r7, #20]
  in.pOp1 = plaintext;
 80001d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000208 <main+0x8c>)
 80001d8:	613b      	str	r3, [r7, #16]
  if (HAL_PKA_ModExp(&hpka, &in, 5000) != HAL_OK)
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80001e0:	4619      	mov	r1, r3
 80001e2:	480a      	ldr	r0, [pc, #40]	@ (800020c <main+0x90>)
 80001e4:	f000 fb31 	bl	800084a <HAL_PKA_ModExp>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d001      	beq.n	80001f2 <main+0x76>
  {
	  Error_Handler();
 80001ee:	f000 f89f 	bl	8000330 <Error_Handler>
  }

  HAL_PKA_ModExp_GetResult(&hpka, decrypted_data);
 80001f2:	4909      	ldr	r1, [pc, #36]	@ (8000218 <main+0x9c>)
 80001f4:	4805      	ldr	r0, [pc, #20]	@ (800020c <main+0x90>)
 80001f6:	f000 fb3c 	bl	8000872 <HAL_PKA_ModExp_GetResult>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fa:	bf00      	nop
 80001fc:	e7fd      	b.n	80001fa <main+0x7e>
 80001fe:	bf00      	nop
 8000200:	2000008c 	.word	0x2000008c
 8000204:	20000008 	.word	0x20000008
 8000208:	20000110 	.word	0x20000110
 800020c:	200001b8 	.word	0x200001b8
 8000210:	200001c4 	.word	0x200001c4
 8000214:	20000090 	.word	0x20000090
 8000218:	20000244 	.word	0x20000244

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b09a      	sub	sp, #104	@ 0x68
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0320 	add.w	r3, r7, #32
 8000226:	2248      	movs	r2, #72	@ 0x48
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fb38 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000242:	4b21      	ldr	r3, [pc, #132]	@ (80002c8 <SystemClock_Config+0xac>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800024a:	4a1f      	ldr	r2, [pc, #124]	@ (80002c8 <SystemClock_Config+0xac>)
 800024c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	4b1d      	ldr	r3, [pc, #116]	@ (80002c8 <SystemClock_Config+0xac>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800025e:	2322      	movs	r3, #34	@ 0x22
 8000260:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000262:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000266:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026c:	2340      	movs	r3, #64	@ 0x40
 800026e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000270:	2300      	movs	r3, #0
 8000272:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000274:	2360      	movs	r3, #96	@ 0x60
 8000276:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000278:	2300      	movs	r3, #0
 800027a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0320 	add.w	r3, r7, #32
 8000280:	4618      	mov	r0, r3
 8000282:	f001 f8ff 	bl	8001484 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800028c:	f000 f850 	bl	8000330 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000290:	236f      	movs	r3, #111	@ 0x6f
 8000292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000294:	2300      	movs	r3, #0
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2100      	movs	r1, #0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fc5b 	bl	8001b6c <HAL_RCC_ClockConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80002bc:	f000 f838 	bl	8000330 <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3768      	adds	r7, #104	@ 0x68
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	58000400 	.word	0x58000400

080002cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b094      	sub	sp, #80	@ 0x50
 80002d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002d2:	463b      	mov	r3, r7
 80002d4:	2250      	movs	r2, #80	@ 0x50
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f002 fae1 	bl	80028a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80002de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002e2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80002e4:	2300      	movs	r3, #0
 80002e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80002e8:	2310      	movs	r3, #16
 80002ea:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002ec:	463b      	mov	r3, r7
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 f84f 	bl	8002392 <HAL_RCCEx_PeriphCLKConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80002fa:	f000 f819 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80002fe:	bf00      	nop
 8000300:	3750      	adds	r7, #80	@ 0x50
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_PKA_Init+0x20>)
 800030e:	4a07      	ldr	r2, [pc, #28]	@ (800032c <MX_PKA_Init+0x24>)
 8000310:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	@ (8000328 <MX_PKA_Init+0x20>)
 8000314:	f000 fa6b 	bl	80007ee <HAL_PKA_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 800031e:	f000 f807 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	200001b8 	.word	0x200001b8
 800032c:	58002000 	.word	0x58002000

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <Error_Handler+0x8>

0800033c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800034a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4313      	orrs	r3, r2
 8000352:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4013      	ands	r3, r2
 800035e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000360:	68fb      	ldr	r3, [r7, #12]
}
 8000362:	bf00      	nop
 8000364:	3714      	adds	r7, #20
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a05      	ldr	r2, [pc, #20]	@ (80003a0 <HAL_PKA_MspInit+0x24>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d103      	bne.n	8000396 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800038e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000392:	f7ff ffd3 	bl	800033c <LL_AHB3_GRP1_EnableClock>

  /* USER CODE END PKA_MspInit 1 */

  }

}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	58002000 	.word	0x58002000

080003a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <NMI_Handler+0x4>

080003ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b0:	bf00      	nop
 80003b2:	e7fd      	b.n	80003b0 <HardFault_Handler+0x4>

080003b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b8:	bf00      	nop
 80003ba:	e7fd      	b.n	80003b8 <MemManage_Handler+0x4>

080003bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <BusFault_Handler+0x4>

080003c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003c8:	bf00      	nop
 80003ca:	e7fd      	b.n	80003c8 <UsageFault_Handler+0x4>

080003cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003fa:	f000 f8e9 	bl	80005d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000408:	4b24      	ldr	r3, [pc, #144]	@ (800049c <SystemInit+0x98>)
 800040a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800040e:	4a23      	ldr	r2, [pc, #140]	@ (800049c <SystemInit+0x98>)
 8000410:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000414:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800042c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000430:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800043c:	4b18      	ldr	r3, [pc, #96]	@ (80004a0 <SystemInit+0x9c>)
 800043e:	4013      	ands	r3, r2
 8000440:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800044a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800044e:	f023 0305 	bic.w	r3, r3, #5
 8000452:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800045a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800045e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000462:	f023 0301 	bic.w	r3, r3, #1
 8000466:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800046a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800046e:	4a0d      	ldr	r2, [pc, #52]	@ (80004a4 <SystemInit+0xa0>)
 8000470:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000476:	4a0b      	ldr	r2, [pc, #44]	@ (80004a4 <SystemInit+0xa0>)
 8000478:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800047a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000484:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000488:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800048a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	e000ed00 	.word	0xe000ed00
 80004a0:	faf6fefb 	.word	0xfaf6fefb
 80004a4:	22041000 	.word	0x22041000

080004a8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80004a8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004aa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ac:	3304      	adds	r3, #4

080004ae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004ae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80004b2:	d3f9      	bcc.n	80004a8 <CopyDataInit>
  bx lr
 80004b4:	4770      	bx	lr

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80004b6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80004b8:	3004      	adds	r0, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80004ba:	4288      	cmp	r0, r1
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>
  bx lr
 80004be:	4770      	bx	lr

080004c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c0:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c4:	f7ff ff9e 	bl	8000404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80004c8:	480b      	ldr	r0, [pc, #44]	@ (80004f8 <LoopForever+0x6>)
 80004ca:	490c      	ldr	r1, [pc, #48]	@ (80004fc <LoopForever+0xa>)
 80004cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000500 <LoopForever+0xe>)
 80004ce:	2300      	movs	r3, #0
 80004d0:	f7ff ffed 	bl	80004ae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80004d4:	480b      	ldr	r0, [pc, #44]	@ (8000504 <LoopForever+0x12>)
 80004d6:	490c      	ldr	r1, [pc, #48]	@ (8000508 <LoopForever+0x16>)
 80004d8:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <LoopForever+0x1a>)
 80004da:	2300      	movs	r3, #0
 80004dc:	f7ff ffe7 	bl	80004ae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80004e0:	480b      	ldr	r0, [pc, #44]	@ (8000510 <LoopForever+0x1e>)
 80004e2:	490c      	ldr	r1, [pc, #48]	@ (8000514 <LoopForever+0x22>)
 80004e4:	2300      	movs	r3, #0
 80004e6:	f7ff ffe8 	bl	80004ba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ea:	f002 f9e1 	bl	80028b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80004ee:	f7ff fe45 	bl	800017c <main>

080004f2 <LoopForever>:

LoopForever:
  b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   r0, =_estack
 80004f4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80004f8:	20000008 	.word	0x20000008
 80004fc:	2000019c 	.word	0x2000019c
 8000500:	080029c4 	.word	0x080029c4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000504:	20030000 	.word	0x20030000
 8000508:	20030000 	.word	0x20030000
 800050c:	08002b58 	.word	0x08002b58
  INIT_BSS _sbss, _ebss
 8000510:	2000019c 	.word	0x2000019c
 8000514:	200002c8 	.word	0x200002c8

08000518 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_IRQHandler>
	...

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000522:	2300      	movs	r3, #0
 8000524:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_Init+0x3c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <HAL_Init+0x3c>)
 800052c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000530:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000532:	2003      	movs	r0, #3
 8000534:	f000 f92a 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000538:	200f      	movs	r0, #15
 800053a:	f000 f80f 	bl	800055c <HAL_InitTick>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	e001      	b.n	800054e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800054a:	f7ff ff10 	bl	800036e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800054e:	79fb      	ldrb	r3, [r7, #7]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	58004000 	.word	0x58004000

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000568:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <HAL_InitTick+0x6c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d024      	beq.n	80005ba <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000570:	f001 fcaa 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8000574:	4602      	mov	r2, r0
 8000576:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <HAL_InitTick+0x6c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	4619      	mov	r1, r3
 800057c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000580:	fbb3 f3f1 	udiv	r3, r3, r1
 8000584:	fbb2 f3f3 	udiv	r3, r2, r3
 8000588:	4618      	mov	r0, r3
 800058a:	f000 f924 	bl	80007d6 <HAL_SYSTICK_Config>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d10f      	bne.n	80005b4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b0f      	cmp	r3, #15
 8000598:	d809      	bhi.n	80005ae <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059a:	2200      	movs	r2, #0
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	f04f 30ff 	mov.w	r0, #4294967295
 80005a2:	f000 f8fe 	bl	80007a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005a6:	4a09      	ldr	r2, [pc, #36]	@ (80005cc <HAL_InitTick+0x70>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	e007      	b.n	80005be <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	73fb      	strb	r3, [r7, #15]
 80005b2:	e004      	b.n	80005be <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
 80005b8:	e001      	b.n	80005be <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005be:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000198 	.word	0x20000198
 80005cc:	20000194 	.word	0x20000194

080005d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_IncTick+0x20>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <HAL_IncTick+0x24>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4413      	add	r3, r2
 80005e0:	4a04      	ldr	r2, [pc, #16]	@ (80005f4 <HAL_IncTick+0x24>)
 80005e2:	6013      	str	r3, [r2, #0]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000198 	.word	0x20000198
 80005f4:	200002c4 	.word	0x200002c4

080005f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b03      	ldr	r3, [pc, #12]	@ (800060c <HAL_GetTick+0x14>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	200002c4 	.word	0x200002c4

08000610 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000614:	4b03      	ldr	r3, [pc, #12]	@ (8000624 <HAL_GetTickPrio+0x14>)
 8000616:	681b      	ldr	r3, [r3, #0]
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000194 	.word	0x20000194

08000628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	@ (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <__NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	@ (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	@ (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	@ 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43da      	mvns	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43d9      	mvns	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	@ 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	@ (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff8e 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff47 	bl	8000628 <__NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff5e 	bl	8000670 <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff90 	bl	80006e0 <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5f 	bl	800068c <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffb2 	bl	8000748 <SysTick_Config>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b084      	sub	sp, #16
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d01d      	beq.n	800083c <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff fdb6 	bl	800037c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2202      	movs	r2, #2
 8000814:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 800082c:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2201      	movs	r2, #1
 8000838:	711a      	strb	r2, [r3, #4]
 800083a:	e001      	b.n	8000840 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_PKA_ModExp>:
  * @param  in Input information
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_ModExp(PKA_HandleTypeDef *hpka, PKA_ModExpInTypeDef *in, uint32_t Timeout)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b084      	sub	sp, #16
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  /* Set input parameter in PKA RAM */
  PKA_ModExp_Set(hpka, in);
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f000 fa32 	bl	8000cc2 <PKA_ModExp_Set>

  /* Start the operation */
  return PKA_Process(hpka, PKA_MODE_MODULAR_EXP, Timeout);
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	2100      	movs	r1, #0
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f000 f9c1 	bl	8000bea <PKA_Process>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_PKA_ModExp_GetResult>:
  * @param  hpka PKA handle
  * @param  pRes Output buffer
  * @retval HAL status
  */
void HAL_PKA_ModExp_GetResult(PKA_HandleTypeDef *hpka, uint8_t *pRes)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
  uint32_t size;

  /* Indicate to the user the final size */
  size = (hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] + 7UL) / 8UL;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8000884:	3307      	adds	r3, #7
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	60fb      	str	r3, [r7, #12]

  /* Move the result to appropriate location (indicated in out parameter) */
  PKA_Memcpy_u32_to_u8(pRes, &hpka->Instance->RAM[PKA_MODULAR_EXP_OUT_SM_ALGO_ACC1], size);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f203 7324 	addw	r3, r3, #1828	@ 0x724
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	4619      	mov	r1, r3
 8000896:	6838      	ldr	r0, [r7, #0]
 8000898:	f000 f867 	bl	800096a <PKA_Memcpy_u32_to_u8>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <PKA_PollEndOfOperation>:
  * @param  Timeout Timeout duration in millisecond.
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_PollEndOfOperation(PKA_HandleTypeDef *hpka, uint32_t Timeout, uint32_t Tickstart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  /* Wait for the end of operation or timeout */
  while ((hpka->Instance->SR & PKA_SR_PROCENDF) == 0UL)
 80008b0:	e010      	b.n	80008d4 <PKA_PollEndOfOperation+0x30>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b8:	d00c      	beq.n	80008d4 <PKA_PollEndOfOperation+0x30>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0UL))
 80008ba:	f7ff fe9d 	bl	80005f8 <HAL_GetTick>
 80008be:	4602      	mov	r2, r0
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	68ba      	ldr	r2, [r7, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d302      	bcc.n	80008d0 <PKA_PollEndOfOperation+0x2c>
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d101      	bne.n	80008d4 <PKA_PollEndOfOperation+0x30>
      {
        return HAL_TIMEOUT;
 80008d0:	2303      	movs	r3, #3
 80008d2:	e007      	b.n	80008e4 <PKA_PollEndOfOperation+0x40>
  while ((hpka->Instance->SR & PKA_SR_PROCENDF) == 0UL)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0e7      	beq.n	80008b2 <PKA_PollEndOfOperation+0xe>
      }
    }
  }
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <PKA_CheckError>:
  * @param  hpka PKA handle
  * @param  mode PKA operating mode
  * @retval error code
  */
uint32_t PKA_CheckError(PKA_HandleTypeDef *hpka, uint32_t mode)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t err = HAL_PKA_ERROR_NONE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]

  /* Check RAMERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_RAMERR) == SET)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000904:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000908:	d103      	bne.n	8000912 <PKA_CheckError+0x26>
  {
    err |= HAL_PKA_ERROR_RAMERR;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	60fb      	str	r3, [r7, #12]
  }

  /* Check ADDRERR error */
  if (__HAL_PKA_GET_FLAG(hpka, PKA_FLAG_ADDRERR) == SET)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800091c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000920:	d103      	bne.n	800092a <PKA_CheckError+0x3e>
  {
    err |= HAL_PKA_ERROR_ADDRERR;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
  }

  /* Check the operation success in case of ECDSA signature */
  if (mode == PKA_MODE_ECDSA_SIGNATURE)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2b24      	cmp	r3, #36	@ 0x24
 800092e:	d109      	bne.n	8000944 <PKA_CheckError+0x58>
  {
#define EDCSA_SIGN_NOERROR 0UL
    /* If error output result is different from no error, ecsa sign operation need to be repeated */
    if (hpka->Instance->RAM[PKA_ECDSA_SIGN_OUT_ERROR] != EDCSA_SIGN_NOERROR)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f8d3 3ee8 	ldr.w	r3, [r3, #3816]	@ 0xee8
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <PKA_CheckError+0x58>
    {
      err |= HAL_PKA_ERROR_OPERATION;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	60fb      	str	r3, [r7, #12]
    }
  }

  return err;
 8000944:	68fb      	ldr	r3, [r7, #12]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <PKA_GetBitSize_u8>:
/**
  * @brief  Get number of bits inside an array of u8.
  * @param  byteNumber Number of u8 inside the array
  */
uint32_t PKA_GetBitSize_u8(uint32_t byteNumber)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
  /* Convert from number of uint8_t in an array to the associated number of bits in this array */
  return byteNumber * 8UL;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	00db      	lsls	r3, r3, #3
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PKA_Memcpy_u32_to_u8>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy
  * @retval dst
  */
void PKA_Memcpy_u32_to_u8(uint8_t dst[], __IO const uint32_t src[], size_t n)
{
 800096a:	b480      	push	{r7}
 800096c:	b087      	sub	sp, #28
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
  if (dst != NULL)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 808a 	beq.w	8000a92 <PKA_Memcpy_u32_to_u8+0x128>
  {
    if (src != NULL)
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	2b00      	cmp	r3, #0
 8000982:	f000 8086 	beq.w	8000a92 <PKA_Memcpy_u32_to_u8+0x128>
    {
      uint32_t index_uint32_t = 0UL; /* This index is used outside of the loop */
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]

      for (; index_uint32_t < (n / 4UL); index_uint32_t++)
 800098a:	e036      	b.n	80009fa <PKA_Memcpy_u32_to_u8+0x90>
      {
        /* Avoid casting from uint8_t* to uint32_t* by copying 4 uint8_t in a row */
        /* Apply __REV equivalent */
        uint32_t index_uint8_t = n - 4UL - (index_uint32_t * 4UL);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	3b04      	subs	r3, #4
 8000996:	613b      	str	r3, [r7, #16]
        dst[index_uint8_t + 3UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	68ba      	ldr	r2, [r7, #8]
 800099e:	4413      	add	r3, r2
 80009a0:	6819      	ldr	r1, [r3, #0]
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	3303      	adds	r3, #3
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	4413      	add	r3, r2
 80009aa:	b2ca      	uxtb	r2, r1
 80009ac:	701a      	strb	r2, [r3, #0]
        dst[index_uint8_t + 2UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	0a19      	lsrs	r1, r3, #8
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	3302      	adds	r3, #2
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	b2ca      	uxtb	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
        dst[index_uint8_t + 1UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	4413      	add	r3, r2
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	0c19      	lsrs	r1, r3, #16
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	3301      	adds	r3, #1
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	b2ca      	uxtb	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
        dst[index_uint8_t + 0UL] = (uint8_t)((src[index_uint32_t] & 0xFF000000U) >> 24UL);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	4413      	add	r3, r2
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	0e19      	lsrs	r1, r3, #24
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	4413      	add	r3, r2
 80009f0:	b2ca      	uxtb	r2, r1
 80009f2:	701a      	strb	r2, [r3, #0]
      for (; index_uint32_t < (n / 4UL); index_uint32_t++)
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3301      	adds	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3c3      	bcc.n	800098c <PKA_Memcpy_u32_to_u8+0x22>
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0303 	and.w	r3, r3, #3
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d108      	bne.n	8000a20 <PKA_Memcpy_u32_to_u8+0xb6>
      {
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	4413      	add	r3, r2
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	701a      	strb	r2, [r3, #0]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 8000a1e:	e038      	b.n	8000a92 <PKA_Memcpy_u32_to_u8+0x128>
      else if ((n % 4UL) == 2UL)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0303 	and.w	r3, r3, #3
 8000a26:	2b02      	cmp	r3, #2
 8000a28:	d112      	bne.n	8000a50 <PKA_Memcpy_u32_to_u8+0xe6>
        dst[1UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	4413      	add	r3, r2
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	701a      	strb	r2, [r3, #0]
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	4413      	add	r3, r2
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	0a1b      	lsrs	r3, r3, #8
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	701a      	strb	r2, [r3, #0]
}
 8000a4e:	e020      	b.n	8000a92 <PKA_Memcpy_u32_to_u8+0x128>
      else if ((n % 4UL) == 3UL)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0303 	and.w	r3, r3, #3
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d11b      	bne.n	8000a92 <PKA_Memcpy_u32_to_u8+0x128>
        dst[2UL] = (uint8_t)((src[index_uint32_t] & 0x000000FFU));
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	4413      	add	r3, r2
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	3302      	adds	r3, #2
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	701a      	strb	r2, [r3, #0]
        dst[1UL] = (uint8_t)((src[index_uint32_t] & 0x0000FF00U) >> 8UL);
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	4413      	add	r3, r2
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	0a1a      	lsrs	r2, r3, #8
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	701a      	strb	r2, [r3, #0]
        dst[0UL] = (uint8_t)((src[index_uint32_t] & 0x00FF0000U) >> 16UL);
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	4413      	add	r3, r2
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	0c1b      	lsrs	r3, r3, #16
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	701a      	strb	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	371c      	adds	r7, #28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PKA_Memcpy_u8_to_u32>:
  * @param  src Pointer to source
  * @param  n Number of uint8_t to copy (must be multiple of 4)
  * @retval dst
  */
void PKA_Memcpy_u8_to_u32(__IO uint32_t dst[], const uint8_t src[], size_t n)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b087      	sub	sp, #28
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	60f8      	str	r0, [r7, #12]
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
  if (dst != NULL)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	f000 8096 	beq.w	8000bde <PKA_Memcpy_u8_to_u32+0x140>
  {
    if (src != NULL)
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f000 8092 	beq.w	8000bde <PKA_Memcpy_u8_to_u32+0x140>
    {
      uint32_t index = 0UL; /* This index is used outside of the loop */
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]

      for (; index < (n / 4UL); index++)
 8000abe:	e030      	b.n	8000b22 <PKA_Memcpy_u8_to_u32+0x84>
      {
        /* Apply the equivalent of __REV from uint8_t to uint32_t */
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	4413      	add	r3, r2
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	3b02      	subs	r3, #2
 8000adc:	68ba      	ldr	r2, [r7, #8]
 8000ade:	4413      	add	r3, r2
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	ea41 0203 	orr.w	r2, r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL) \
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	1acb      	subs	r3, r1, r3
 8000af0:	3b03      	subs	r3, #3
 8000af2:	68b9      	ldr	r1, [r7, #8]
 8000af4:	440b      	add	r3, r1
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	041b      	lsls	r3, r3, #16
 8000afa:	ea42 0103 	orr.w	r1, r2, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	3b04      	subs	r3, #4
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	061a      	lsls	r2, r3, #24
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	4403      	add	r3, r0
                     | ((uint32_t)src[(n - (index * 4UL) - 4UL)] << 24UL);
 8000b18:	430a      	orrs	r2, r1
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8000b1a:	601a      	str	r2, [r3, #0]
      for (; index < (n / 4UL); index++)
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d3c9      	bcc.n	8000ac0 <PKA_Memcpy_u8_to_u32+0x22>
      }

      /* Manage the buffers not aligned on uint32_t */
      if ((n % 4UL) == 1UL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d10e      	bne.n	8000b54 <PKA_Memcpy_u8_to_u32+0xb6>
      {
        dst[index] = (uint32_t)src[(n - (index * 4UL) - 1UL)];
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	4413      	add	r3, r2
 8000b44:	7819      	ldrb	r1, [r3, #0]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	460a      	mov	r2, r1
 8000b50:	601a      	str	r2, [r3, #0]
      {
        /* The last element is already handle in the loop */
      }
    }
  }
}
 8000b52:	e044      	b.n	8000bde <PKA_Memcpy_u8_to_u32+0x140>
      else if ((n % 4UL) == 2UL)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d118      	bne.n	8000b90 <PKA_Memcpy_u8_to_u32+0xf2>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	3b01      	subs	r3, #1
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	3b02      	subs	r3, #2
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	021a      	lsls	r2, r3, #8
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	440b      	add	r3, r1
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL);
 8000b8a:	4302      	orrs	r2, r0
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8000b8c:	601a      	str	r2, [r3, #0]
}
 8000b8e:	e026      	b.n	8000bde <PKA_Memcpy_u8_to_u32+0x140>
      else if ((n % 4UL) == 3UL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d121      	bne.n	8000bde <PKA_Memcpy_u8_to_u32+0x140>
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	68ba      	ldr	r2, [r7, #8]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 2UL)] << 8UL) \
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	3b02      	subs	r3, #2
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	4319      	orrs	r1, r3
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	041a      	lsls	r2, r3, #16
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	4403      	add	r3, r0
                     | ((uint32_t)src[(n - (index * 4UL) - 3UL)] << 16UL);
 8000bda:	430a      	orrs	r2, r1
        dst[index] = ((uint32_t)src[(n - (index * 4UL) - 1UL)]) \
 8000bdc:	601a      	str	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	371c      	adds	r7, #28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PKA_Process>:
  * @param  mode PKA operation
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_Process(PKA_HandleTypeDef *hpka, uint32_t mode, uint32_t Timeout)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;

  if (hpka->State == HAL_PKA_STATE_READY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	791b      	ldrb	r3, [r3, #4]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d157      	bne.n	8000cb4 <PKA_Process+0xca>
  {
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2202      	movs	r2, #2
 8000c08:	711a      	strb	r2, [r3, #4]

    /* Clear any pending error */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c10:	f7ff fcf2 	bl	80005f8 <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

    /* Set the mode and deactivate the interrupts */
    MODIFY_REG(hpka->Instance->CR, PKA_CR_MODE | PKA_CR_PROCENDIE | PKA_CR_RAMERRIE | PKA_CR_ADDRERRIE,
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f423 13d1 	bic.w	r3, r3, #1712128	@ 0x1a2000
 8000c20:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	0211      	lsls	r1, r2, #8
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	6013      	str	r3, [r2, #0]
               mode << PKA_CR_MODE_Pos);

    /* Start the computation */
    hpka->Instance->CR |= PKA_CR_START;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0202 	orr.w	r2, r2, #2
 8000c3e:	601a      	str	r2, [r3, #0]

    /* Wait for the end of operation or timeout */
    if (PKA_PollEndOfOperation(hpka, Timeout, tickstart) != HAL_OK)
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff fe2d 	bl	80008a4 <PKA_PollEndOfOperation>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d015      	beq.n	8000c7c <PKA_Process+0x92>
    {
      /* Abort any ongoing operation */
      CLEAR_BIT(hpka->Instance->CR, PKA_CR_EN);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f022 0201 	bic.w	r2, r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]

      hpka->ErrorCode |= HAL_PKA_ERROR_TIMEOUT;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	f043 0204 	orr.w	r2, r3, #4
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	609a      	str	r2, [r3, #8]

      /* Make ready for the next operation */
      SET_BIT(hpka->Instance->CR, PKA_CR_EN);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 0201 	orr.w	r2, r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
    }

    /* Check error */
    hpka->ErrorCode |= PKA_CheckError(hpka, mode);
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	f7ff fe34 	bl	80008ec <PKA_CheckError>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	609a      	str	r2, [r3, #8]

    /* Clear all flags */
    hpka->Instance->CLRFR |= (PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f442 12d0 	orr.w	r2, r2, #1703936	@ 0x1a0000
 8000c9e:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	711a      	strb	r2, [r3, #4]

    /* Manage the result based on encountered errors */
    if (hpka->ErrorCode != HAL_PKA_ERROR_NONE)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d004      	beq.n	8000cb8 <PKA_Process+0xce>
    {
      err = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	75fb      	strb	r3, [r7, #23]
 8000cb2:	e001      	b.n	8000cb8 <PKA_Process+0xce>
    }
  }
  else
  {
    err = HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	75fb      	strb	r3, [r7, #23]
  }
  return err;
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <PKA_ModExp_Set>:
  * @brief  Set input parameters.
  * @param  hpka PKA handle
  * @param  in Input information
  */
void PKA_ModExp_Set(PKA_HandleTypeDef *hpka, PKA_ModExpInTypeDef *in)
{
 8000cc2:	b590      	push	{r4, r7, lr}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
  /* Get the number of bit per operand */
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_OP_NB_BITS] = PKA_GetBitSize_u8(in->OpSize);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681c      	ldr	r4, [r3, #0]
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	f7ff fe3c 	bl	8000952 <PKA_GetBitSize_u8>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	f8c4 3404 	str.w	r3, [r4, #1028]	@ 0x404

  /* Get the number of bit of the exponent */
  hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXP_NB_BITS] = PKA_GetBitSize_u8(in->expSize);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681c      	ldr	r4, [r3, #0]
 8000ce8:	4610      	mov	r0, r2
 8000cea:	f7ff fe32 	bl	8000952 <PKA_GetBitSize_u8>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400

  /* Move the input parameters pOp1 to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT_BASE], in->pOp1, in->OpSize);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f603 2044 	addw	r0, r3, #2628	@ 0xa44
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68d9      	ldr	r1, [r3, #12]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	461a      	mov	r2, r3
 8000d06:	f7ff feca 	bl	8000a9e <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_EXPONENT_BASE + ((in->OpSize + 3UL) / 4UL));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	6852      	ldr	r2, [r2, #4]
 8000d12:	3203      	adds	r2, #3
 8000d14:	0892      	lsrs	r2, r2, #2
 8000d16:	f202 1291 	addw	r2, r2, #401	@ 0x191
 8000d1a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Move the exponent to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_EXPONENT], in->pExp, in->expSize);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f503 603d 	add.w	r0, r3, #3024	@ 0xbd0
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6899      	ldr	r1, [r3, #8]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	f7ff feb2 	bl	8000a9e <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_EXPONENT + ((in->expSize + 3UL) / 4UL));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	3203      	adds	r2, #3
 8000d44:	0892      	lsrs	r2, r2, #2
 8000d46:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 8000d4a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Move the modulus to PKA RAM */
  PKA_Memcpy_u8_to_u32(&hpka->Instance->RAM[PKA_MODULAR_EXP_IN_MODULUS], in->pMod, in->OpSize);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f603 505c 	addw	r0, r3, #3420	@ 0xd5c
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	6919      	ldr	r1, [r3, #16]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	461a      	mov	r2, r3
 8000d66:	f7ff fe9a 	bl	8000a9e <PKA_Memcpy_u8_to_u32>
  __PKA_RAM_PARAM_END(hpka->Instance->RAM, PKA_MODULAR_EXP_IN_MODULUS + ((in->OpSize + 3UL) / 4UL));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	6852      	ldr	r2, [r2, #4]
 8000d72:	3203      	adds	r2, #3
 8000d74:	0892      	lsrs	r2, r2, #2
 8000d76:	f202 2257 	addw	r2, r2, #599	@ 0x257
 8000d7a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd90      	pop	{r4, r7, pc}

08000d8c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	58000400 	.word	0x58000400

08000dac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	58000400 	.word	0x58000400

08000dc8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000dda:	d101      	bne.n	8000de0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000e3a:	d101      	bne.n	8000e40 <LL_RCC_HSE_IsReady+0x18>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <LL_RCC_HSE_IsReady+0x1a>
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e7c:	6013      	str	r3, [r2, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e9a:	d101      	bne.n	8000ea0 <LL_RCC_HSI_IsReady+0x18>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <LL_RCC_HSI_IsReady+0x1a>
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	061b      	lsls	r3, r3, #24
 8000ec2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	604b      	str	r3, [r1, #4]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f08:	f023 0301 	bic.w	r3, r3, #1
 8000f0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d101      	bne.n	8000f32 <LL_RCC_HSI48_IsReady+0x18>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <LL_RCC_HSI48_IsReady+0x1a>
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fb4:	f023 0304 	bic.w	r3, r3, #4
 8000fb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d101      	bne.n	8000fde <LL_RCC_LSE_IsReady+0x18>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <LL_RCC_LSE_IsReady+0x1a>
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001018:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b02      	cmp	r3, #2
 8001040:	d101      	bne.n	8001046 <LL_RCC_LSI1_IsReady+0x18>
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <LL_RCC_LSI1_IsReady+0x1a>
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800105a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800105e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800107c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001080:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001084:	f023 0304 	bic.w	r3, r3, #4
 8001088:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800109a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800109e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d101      	bne.n	80010ae <LL_RCC_LSI2_IsReady+0x18>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <LL_RCC_LSI2_IsReady+0x1a>
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80010c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010d6:	4313      	orrs	r3, r2
 80010d8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80010ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800110a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001114:	f023 0301 	bic.w	r3, r3, #1
 8001118:	6013      	str	r3, [r2, #0]
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b02      	cmp	r3, #2
 8001134:	d101      	bne.n	800113a <LL_RCC_MSI_IsReady+0x16>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <LL_RCC_MSI_IsReady+0x18>
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800114e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001158:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800117e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2bb0      	cmp	r3, #176	@ 0xb0
 8001184:	d901      	bls.n	800118a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001186:	23b0      	movs	r3, #176	@ 0xb0
 8001188:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800118a:	687b      	ldr	r3, [r7, #4]
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 0203 	bic.w	r2, r3, #3
 80011d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4313      	orrs	r3, r2
 80011dc:	608b      	str	r3, [r1, #8]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 030c 	and.w	r3, r3, #12
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001214:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4313      	orrs	r3, r2
 800121c:	608b      	str	r3, [r1, #8]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001236:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800123a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800123e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4313      	orrs	r3, r2
 8001246:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001262:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001266:	f023 020f 	bic.w	r2, r3, #15
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001272:	4313      	orrs	r3, r2
 8001274:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800128c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001296:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	608b      	str	r3, [r1, #8]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	608b      	str	r3, [r1, #8]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80012f8:	011b      	lsls	r3, r3, #4
 80012fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001334:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001356:	d101      	bne.n	800135c <LL_RCC_PLL_IsReady+0x18>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <LL_RCC_PLL_IsReady+0x1a>
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f003 0303 	and.w	r3, r3, #3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013dc:	d101      	bne.n	80013e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80013fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001402:	d101      	bne.n	8001408 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800141c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001428:	d101      	bne.n	800142e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800142a:	2301      	movs	r3, #1
 800142c:	e000      	b.n	8001430 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800143e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800144c:	d101      	bne.n	8001452 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800144e:	2301      	movs	r3, #1
 8001450:	e000      	b.n	8001454 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800146c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001470:	d101      	bne.n	8001476 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b08d      	sub	sp, #52	@ 0x34
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e363      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 808d 	beq.w	80015be <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a4:	f7ff fea1 	bl	80011ea <LL_RCC_GetSysClkSource>
 80014a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014aa:	f7ff ff82 	bl	80013b2 <LL_RCC_PLL_GetMainSource>
 80014ae:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80014b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d005      	beq.n	80014c2 <HAL_RCC_OscConfig+0x3e>
 80014b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b8:	2b0c      	cmp	r3, #12
 80014ba:	d147      	bne.n	800154c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80014bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d144      	bne.n	800154c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e347      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80014d2:	f7ff fe4c 	bl	800116e <LL_RCC_MSI_GetRange>
 80014d6:	4603      	mov	r3, r0
 80014d8:	429c      	cmp	r4, r3
 80014da:	d914      	bls.n	8001506 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 fd05 	bl	8001ef0 <RCC_SetFlashLatencyFromMSIRange>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e336      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fe26 	bl	8001146 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe4a 	bl	8001198 <LL_RCC_MSI_SetCalibTrimming>
 8001504:	e013      	b.n	800152e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fe1b 	bl	8001146 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe3f 	bl	8001198 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fce6 	bl	8001ef0 <RCC_SetFlashLatencyFromMSIRange>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e317      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800152e:	f000 fccb 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001532:	4603      	mov	r3, r0
 8001534:	4aa4      	ldr	r2, [pc, #656]	@ (80017c8 <HAL_RCC_OscConfig+0x344>)
 8001536:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001538:	4ba4      	ldr	r3, [pc, #656]	@ (80017cc <HAL_RCC_OscConfig+0x348>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f80d 	bl	800055c <HAL_InitTick>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d039      	beq.n	80015bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e308      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01e      	beq.n	8001592 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001554:	f7ff fdc8 	bl	80010e8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001558:	f7ff f84e 	bl	80005f8 <HAL_GetTick>
 800155c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001560:	f7ff f84a 	bl	80005f8 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e2f5      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001572:	f7ff fdd7 	bl	8001124 <LL_RCC_MSI_IsReady>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f1      	beq.n	8001560 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fde0 	bl	8001146 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fe04 	bl	8001198 <LL_RCC_MSI_SetCalibTrimming>
 8001590:	e015      	b.n	80015be <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001592:	f7ff fdb8 	bl	8001106 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001596:	f7ff f82f 	bl	80005f8 <HAL_GetTick>
 800159a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159e:	f7ff f82b 	bl	80005f8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e2d6      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80015b0:	f7ff fdb8 	bl	8001124 <LL_RCC_MSI_IsReady>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f1      	bne.n	800159e <HAL_RCC_OscConfig+0x11a>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80015bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d047      	beq.n	800165a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	f7ff fe0e 	bl	80011ea <LL_RCC_GetSysClkSource>
 80015ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d0:	f7ff feef 	bl	80013b2 <LL_RCC_PLL_GetMainSource>
 80015d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x164>
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	2b0c      	cmp	r3, #12
 80015e0:	d108      	bne.n	80015f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d134      	bne.n	800165a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e2b4      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015fc:	d102      	bne.n	8001604 <HAL_RCC_OscConfig+0x180>
 80015fe:	f7ff fbf5 	bl	8000dec <LL_RCC_HSE_Enable>
 8001602:	e001      	b.n	8001608 <HAL_RCC_OscConfig+0x184>
 8001604:	f7ff fc01 	bl	8000e0a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d012      	beq.n	8001636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7fe fff2 	bl	80005f8 <HAL_GetTick>
 8001614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7fe ffee 	bl	80005f8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	@ 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e299      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800162a:	f7ff fbfd 	bl	8000e28 <LL_RCC_HSE_IsReady>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f1      	beq.n	8001618 <HAL_RCC_OscConfig+0x194>
 8001634:	e011      	b.n	800165a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7fe ffdf 	bl	80005f8 <HAL_GetTick>
 800163a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163e:	f7fe ffdb 	bl	80005f8 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	@ 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e286      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001650:	f7ff fbea 	bl	8000e28 <LL_RCC_HSE_IsReady>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f1      	bne.n	800163e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d04c      	beq.n	8001700 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001666:	f7ff fdc0 	bl	80011ea <LL_RCC_GetSysClkSource>
 800166a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800166c:	f7ff fea1 	bl	80013b2 <LL_RCC_PLL_GetMainSource>
 8001670:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d005      	beq.n	8001684 <HAL_RCC_OscConfig+0x200>
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d10e      	bne.n	800169c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d10b      	bne.n	800169c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e266      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fc09 	bl	8000eac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800169a:	e031      	b.n	8001700 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d019      	beq.n	80016d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a4:	f7ff fbd2 	bl	8000e4c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7fe ffa6 	bl	80005f8 <HAL_GetTick>
 80016ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b0:	f7fe ffa2 	bl	80005f8 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e24d      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80016c2:	f7ff fbe1 	bl	8000e88 <LL_RCC_HSI_IsReady>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f1      	beq.n	80016b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fbeb 	bl	8000eac <LL_RCC_HSI_SetCalibTrimming>
 80016d6:	e013      	b.n	8001700 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d8:	f7ff fbc7 	bl	8000e6a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7fe ff8c 	bl	80005f8 <HAL_GetTick>
 80016e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e4:	f7fe ff88 	bl	80005f8 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e233      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80016f6:	f7ff fbc7 	bl	8000e88 <LL_RCC_HSI_IsReady>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f1      	bne.n	80016e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b00      	cmp	r3, #0
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 80a3 	beq.w	8001860 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d076      	beq.n	8001810 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b00      	cmp	r3, #0
 800172c:	d046      	beq.n	80017bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800172e:	f7ff fc7e 	bl	800102e <LL_RCC_LSI1_IsReady>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d113      	bne.n	8001760 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001738:	f7ff fc57 	bl	8000fea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800173c:	f7fe ff5c 	bl	80005f8 <HAL_GetTick>
 8001740:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001744:	f7fe ff58 	bl	80005f8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e203      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001756:	f7ff fc6a 	bl	800102e <LL_RCC_LSI1_IsReady>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f1      	beq.n	8001744 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001760:	f7ff fc77 	bl	8001052 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7fe ff48 	bl	80005f8 <HAL_GetTick>
 8001768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800176c:	f7fe ff44 	bl	80005f8 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b03      	cmp	r3, #3
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1ef      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800177e:	f7ff fc8a 	bl	8001096 <LL_RCC_LSI2_IsReady>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f1      	beq.n	800176c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fc94 	bl	80010ba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001792:	f7ff fc3b 	bl	800100c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001796:	f7fe ff2f 	bl	80005f8 <HAL_GetTick>
 800179a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800179e:	f7fe ff2b 	bl	80005f8 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1d6      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80017b0:	f7ff fc3d 	bl	800102e <LL_RCC_LSI1_IsReady>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f1      	bne.n	800179e <HAL_RCC_OscConfig+0x31a>
 80017ba:	e051      	b.n	8001860 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80017bc:	f7ff fc15 	bl	8000fea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7fe ff1a 	bl	80005f8 <HAL_GetTick>
 80017c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80017c6:	e00c      	b.n	80017e2 <HAL_RCC_OscConfig+0x35e>
 80017c8:	20000190 	.word	0x20000190
 80017cc:	20000194 	.word	0x20000194
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017d0:	f7fe ff12 	bl	80005f8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1bd      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80017e2:	f7ff fc24 	bl	800102e <LL_RCC_LSI1_IsReady>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f1      	beq.n	80017d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80017ec:	f7ff fc42 	bl	8001074 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017f2:	f7fe ff01 	bl	80005f8 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1ac      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001804:	f7ff fc47 	bl	8001096 <LL_RCC_LSI2_IsReady>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f1      	bne.n	80017f2 <HAL_RCC_OscConfig+0x36e>
 800180e:	e027      	b.n	8001860 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001810:	f7ff fc30 	bl	8001074 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7fe fef0 	bl	80005f8 <HAL_GetTick>
 8001818:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800181c:	f7fe feec 	bl	80005f8 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b03      	cmp	r3, #3
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e197      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800182e:	f7ff fc32 	bl	8001096 <LL_RCC_LSI2_IsReady>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f1      	bne.n	800181c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001838:	f7ff fbe8 	bl	800100c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183c:	f7fe fedc 	bl	80005f8 <HAL_GetTick>
 8001840:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001844:	f7fe fed8 	bl	80005f8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e183      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001856:	f7ff fbea 	bl	800102e <LL_RCC_LSI1_IsReady>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f1      	bne.n	8001844 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800186c:	4ba7      	ldr	r3, [pc, #668]	@ (8001b0c <HAL_RCC_OscConfig+0x688>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d114      	bne.n	80018a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001878:	f7ff fa88 	bl	8000d8c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187c:	f7fe febc 	bl	80005f8 <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001884:	f7fe feb8 	bl	80005f8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e163      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001896:	4b9d      	ldr	r3, [pc, #628]	@ (8001b0c <HAL_RCC_OscConfig+0x688>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <HAL_RCC_OscConfig+0x42c>
 80018aa:	f7ff fb48 	bl	8000f3e <LL_RCC_LSE_Enable>
 80018ae:	e00c      	b.n	80018ca <HAL_RCC_OscConfig+0x446>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d104      	bne.n	80018c2 <HAL_RCC_OscConfig+0x43e>
 80018b8:	f7ff fb63 	bl	8000f82 <LL_RCC_LSE_EnableBypass>
 80018bc:	f7ff fb3f 	bl	8000f3e <LL_RCC_LSE_Enable>
 80018c0:	e003      	b.n	80018ca <HAL_RCC_OscConfig+0x446>
 80018c2:	f7ff fb4d 	bl	8000f60 <LL_RCC_LSE_Disable>
 80018c6:	f7ff fb6d 	bl	8000fa4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d014      	beq.n	80018fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7fe fe91 	bl	80005f8 <HAL_GetTick>
 80018d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7fe fe8d 	bl	80005f8 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e136      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80018f0:	f7ff fb69 	bl	8000fc6 <LL_RCC_LSE_IsReady>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0ef      	beq.n	80018da <HAL_RCC_OscConfig+0x456>
 80018fa:	e013      	b.n	8001924 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7fe fe7c 	bl	80005f8 <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001902:	e00a      	b.n	800191a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001904:	f7fe fe78 	bl	80005f8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e121      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800191a:	f7ff fb54 	bl	8000fc6 <LL_RCC_LSE_IsReady>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ef      	bne.n	8001904 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02c      	beq.n	800198a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	2b00      	cmp	r3, #0
 8001936:	d014      	beq.n	8001962 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001938:	f7ff facd 	bl	8000ed6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7fe fe5c 	bl	80005f8 <HAL_GetTick>
 8001940:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001944:	f7fe fe58 	bl	80005f8 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e103      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001956:	f7ff fae0 	bl	8000f1a <LL_RCC_HSI48_IsReady>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f1      	beq.n	8001944 <HAL_RCC_OscConfig+0x4c0>
 8001960:	e013      	b.n	800198a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001962:	f7ff fac9 	bl	8000ef8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7fe fe47 	bl	80005f8 <HAL_GetTick>
 800196a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800196e:	f7fe fe43 	bl	80005f8 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0ee      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8001980:	f7ff facb 	bl	8000f1a <LL_RCC_HSI48_IsReady>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f1      	bne.n	800196e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80e4 	beq.w	8001b5c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001994:	f7ff fc29 	bl	80011ea <LL_RCC_GetSysClkSource>
 8001998:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	f040 80b4 	bne.w	8001b14 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0203 	and.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d123      	bne.n	8001a02 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d11c      	bne.n	8001a02 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	0a1b      	lsrs	r3, r3, #8
 80019cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d114      	bne.n	8001a02 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d10d      	bne.n	8001a02 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d05d      	beq.n	8001abe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	d058      	beq.n	8001aba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e0a1      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a1a:	f7ff fc84 	bl	8001326 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a1e:	f7fe fdeb 	bl	80005f8 <HAL_GetTick>
 8001a22:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7fe fde7 	bl	80005f8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e092      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ef      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	4b30      	ldr	r3, [pc, #192]	@ (8001b10 <HAL_RCC_OscConfig+0x68c>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a5e:	0212      	lsls	r2, r2, #8
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a66:	4311      	orrs	r1, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a72:	430a      	orrs	r2, r1
 8001a74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a7c:	f7ff fc44 	bl	8001308 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a90:	f7fe fdb2 	bl	80005f8 <HAL_GetTick>
 8001a94:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7fe fdae 	bl	80005f8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e059      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ef      	beq.n	8001a98 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	e050      	b.n	8001b5c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e04f      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d147      	bne.n	8001b5c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001acc:	f7ff fc1c 	bl	8001308 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ae0:	f7fe fd8a 	bl	80005f8 <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7fe fd86 	bl	80005f8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e031      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ef      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x664>
 8001b08:	e028      	b.n	8001b5c <HAL_RCC_OscConfig+0x6d8>
 8001b0a:	bf00      	nop
 8001b0c:	58000400 	.word	0x58000400
 8001b10:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d01e      	beq.n	8001b58 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	f7ff fc04 	bl	8001326 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7fe fd6b 	bl	80005f8 <HAL_GetTick>
 8001b22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b26:	f7fe fd67 	bl	80005f8 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e012      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ef      	bne.n	8001b26 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_RCC_OscConfig+0x6e4>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	60cb      	str	r3, [r1, #12]
 8001b56:	e001      	b.n	8001b5c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3734      	adds	r7, #52	@ 0x34
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	eefefffc 	.word	0xeefefffc

08001b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e12d      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b80:	4b98      	ldr	r3, [pc, #608]	@ (8001de4 <HAL_RCC_ClockConfig+0x278>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d91b      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b95      	ldr	r3, [pc, #596]	@ (8001de4 <HAL_RCC_ClockConfig+0x278>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 0207 	bic.w	r2, r3, #7
 8001b96:	4993      	ldr	r1, [pc, #588]	@ (8001de4 <HAL_RCC_ClockConfig+0x278>)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b9e:	f7fe fd2b 	bl	80005f8 <HAL_GetTick>
 8001ba2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ba6:	f7fe fd27 	bl	80005f8 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e111      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8001de4 <HAL_RCC_ClockConfig+0x278>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d1ef      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d016      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fb13 	bl	8001202 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001bdc:	f7fe fd0c 	bl	80005f8 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001be4:	f7fe fd08 	bl	80005f8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e0f2      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001bf6:	f7ff fbe8 	bl	80013ca <LL_RCC_IsActiveFlag_HPRE>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f1      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d016      	beq.n	8001c3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fb0a 	bl	800122a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c16:	f7fe fcef 	bl	80005f8 <HAL_GetTick>
 8001c1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c1e:	f7fe fceb 	bl	80005f8 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0d5      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c30:	f7ff fbdd 	bl	80013ee <LL_RCC_IsActiveFlag_C2HPRE>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f1      	beq.n	8001c1e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d016      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fb03 	bl	8001256 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c50:	f7fe fcd2 	bl	80005f8 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c58:	f7fe fcce 	bl	80005f8 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e0b8      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c6a:	f7ff fbd3 	bl	8001414 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f1      	beq.n	8001c58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d016      	beq.n	8001cae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fafd 	bl	8001284 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c8a:	f7fe fcb5 	bl	80005f8 <HAL_GetTick>
 8001c8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c92:	f7fe fcb1 	bl	80005f8 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e09b      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ca4:	f7ff fbc9 	bl	800143a <LL_RCC_IsActiveFlag_PPRE1>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f1      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d017      	beq.n	8001cea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff faf3 	bl	80012ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cc6:	f7fe fc97 	bl	80005f8 <HAL_GetTick>
 8001cca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cce:	f7fe fc93 	bl	80005f8 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e07d      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ce0:	f7ff fbbd 	bl	800145e <LL_RCC_IsActiveFlag_PPRE2>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f1      	beq.n	8001cce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d043      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001cfe:	f7ff f893 	bl	8000e28 <LL_RCC_HSE_IsReady>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d11e      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e067      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001d14:	f7ff fb16 	bl	8001344 <LL_RCC_PLL_IsReady>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d113      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e05c      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001d2a:	f7ff f9fb 	bl	8001124 <LL_RCC_MSI_IsReady>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d108      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e051      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001d38:	f7ff f8a6 	bl	8000e88 <LL_RCC_HSI_IsReady>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e04a      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fa39 	bl	80011c2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d50:	f7fe fc52 	bl	80005f8 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7fe fc4e 	bl	80005f8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e036      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	f7ff fa3c 	bl	80011ea <LL_RCC_GetSysClkSource>
 8001d72:	4602      	mov	r2, r0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d1ec      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_RCC_ClockConfig+0x278>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d21b      	bcs.n	8001dc4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8c:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <HAL_RCC_ClockConfig+0x278>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 0207 	bic.w	r2, r3, #7
 8001d94:	4913      	ldr	r1, [pc, #76]	@ (8001de4 <HAL_RCC_ClockConfig+0x278>)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d9c:	f7fe fc2c 	bl	80005f8 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001da4:	f7fe fc28 	bl	80005f8 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e012      	b.n	8001ddc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <HAL_RCC_ClockConfig+0x278>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1ef      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dc4:	f000 f880 	bl	8001ec8 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <HAL_RCC_ClockConfig+0x27c>)
 8001dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001dce:	f7fe fc1f 	bl	8000610 <HAL_GetTickPrio>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fbc1 	bl	800055c <HAL_InitTick>
 8001dda:	4603      	mov	r3, r0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	58004000 	.word	0x58004000
 8001de8:	20000190 	.word	0x20000190

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df2:	f7ff f9fa 	bl	80011ea <LL_RCC_GetSysClkSource>
 8001df6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10a      	bne.n	8001e14 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001dfe:	f7ff f9b6 	bl	800116e <LL_RCC_MSI_GetRange>
 8001e02:	4603      	mov	r3, r0
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e04b      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e1a:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	e045      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d10a      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e26:	f7fe ffcf 	bl	8000dc8 <LL_RCC_HSE_IsEnabledDiv2>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d102      	bne.n	8001e36 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001e30:	4b23      	ldr	r3, [pc, #140]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	e03a      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001e36:	4b23      	ldr	r3, [pc, #140]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	e037      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001e3c:	f7ff fab9 	bl	80013b2 <LL_RCC_PLL_GetMainSource>
 8001e40:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d003      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x64>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d003      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0x6a>
 8001e4e:	e00d      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e52:	60bb      	str	r3, [r7, #8]
        break;
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e56:	f7fe ffb7 	bl	8000dc8 <LL_RCC_HSE_IsEnabledDiv2>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001e60:	4b17      	ldr	r3, [pc, #92]	@ (8001ec0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e62:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001e64:	e00d      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001e66:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e68:	60bb      	str	r3, [r7, #8]
        break;
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e6c:	f7ff f97f 	bl	800116e <LL_RCC_MSI_GetRange>
 8001e70:	4603      	mov	r3, r0
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7e:	60bb      	str	r3, [r7, #8]
        break;
 8001e80:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001e82:	f7ff fa71 	bl	8001368 <LL_RCC_PLL_GetN>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	fb03 f402 	mul.w	r4, r3, r2
 8001e8e:	f7ff fa84 	bl	800139a <LL_RCC_PLL_GetDivider>
 8001e92:	4603      	mov	r3, r0
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	3301      	adds	r3, #1
 8001e98:	fbb4 f4f3 	udiv	r4, r4, r3
 8001e9c:	f7ff fa71 	bl	8001382 <LL_RCC_PLL_GetR>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	0f5b      	lsrs	r3, r3, #29
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	fbb4 f3f3 	udiv	r3, r4, r3
 8001eaa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001eac:	68fb      	ldr	r3, [r7, #12]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	0800297c 	.word	0x0800297c
 8001ebc:	00f42400 	.word	0x00f42400
 8001ec0:	003d0900 	.word	0x003d0900
 8001ec4:	007a1200 	.word	0x007a1200

08001ec8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec8:	b598      	push	{r3, r4, r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001ecc:	f7ff ff8e 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	f7ff f9ff 	bl	80012d4 <LL_RCC_GetAHBPrescaler>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	4a03      	ldr	r2, [pc, #12]	@ (8001eec <HAL_RCC_GetHCLKFreq+0x24>)
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd98      	pop	{r3, r4, r7, pc}
 8001eec:	0800293c 	.word	0x0800293c

08001ef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2bb0      	cmp	r3, #176	@ 0xb0
 8001efc:	d903      	bls.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	e007      	b.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	4a11      	ldr	r2, [pc, #68]	@ (8001f54 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001f16:	f7ff f9e9 	bl	80012ec <LL_RCC_GetAHB4Prescaler>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	0c9c      	lsrs	r4, r3, #18
 8001f3a:	f7fe ff37 	bl	8000dac <HAL_PWREx_GetVoltageRange>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4619      	mov	r1, r3
 8001f42:	4620      	mov	r0, r4
 8001f44:	f000 f80c 	bl	8001f60 <RCC_SetFlashLatency>
 8001f48:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	0800297c 	.word	0x0800297c
 8001f58:	0800293c 	.word	0x0800293c
 8001f5c:	431bde83 	.word	0x431bde83

08001f60 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b093      	sub	sp, #76	@ 0x4c
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001f6a:	4b37      	ldr	r3, [pc, #220]	@ (8002048 <RCC_SetFlashLatency+0xe8>)
 8001f6c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001f70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001f76:	4a35      	ldr	r2, [pc, #212]	@ (800204c <RCC_SetFlashLatency+0xec>)
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001f82:	4b33      	ldr	r3, [pc, #204]	@ (8002050 <RCC_SetFlashLatency+0xf0>)
 8001f84:	f107 040c 	add.w	r4, r7, #12
 8001f88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f8e:	2300      	movs	r3, #0
 8001f90:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f98:	d11a      	bne.n	8001fd0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f9e:	e013      	b.n	8001fc8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001fa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	3348      	adds	r3, #72	@ 0x48
 8001fa6:	443b      	add	r3, r7
 8001fa8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d807      	bhi.n	8001fc2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3348      	adds	r3, #72	@ 0x48
 8001fb8:	443b      	add	r3, r7
 8001fba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001fbe:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8001fc0:	e020      	b.n	8002004 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d9e8      	bls.n	8001fa0 <RCC_SetFlashLatency+0x40>
 8001fce:	e019      	b.n	8002004 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fd4:	e013      	b.n	8001ffe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	3348      	adds	r3, #72	@ 0x48
 8001fdc:	443b      	add	r3, r7
 8001fde:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d807      	bhi.n	8001ff8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	3348      	adds	r3, #72	@ 0x48
 8001fee:	443b      	add	r3, r7
 8001ff0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001ff4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8001ff6:	e005      	b.n	8002004 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ffe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002000:	2b02      	cmp	r3, #2
 8002002:	d9e8      	bls.n	8001fd6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <RCC_SetFlashLatency+0xf4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 0207 	bic.w	r2, r3, #7
 800200c:	4911      	ldr	r1, [pc, #68]	@ (8002054 <RCC_SetFlashLatency+0xf4>)
 800200e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002014:	f7fe faf0 	bl	80005f8 <HAL_GetTick>
 8002018:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800201a:	e008      	b.n	800202e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800201c:	f7fe faec 	bl	80005f8 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e007      	b.n	800203e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <RCC_SetFlashLatency+0xf4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002038:	429a      	cmp	r2, r3
 800203a:	d1ef      	bne.n	800201c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	374c      	adds	r7, #76	@ 0x4c
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	08002910 	.word	0x08002910
 800204c:	08002920 	.word	0x08002920
 8002050:	0800292c 	.word	0x0800292c
 8002054:	58004000 	.word	0x58004000

08002058 <LL_RCC_LSE_IsEnabled>:
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <LL_RCC_LSE_IsEnabled+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_RCC_LSE_IsEnabled+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_RCC_LSE_IsReady>:
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b02      	cmp	r3, #2
 800208e:	d101      	bne.n	8002094 <LL_RCC_LSE_IsReady+0x18>
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <LL_RCC_LSE_IsReady+0x1a>
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_RCC_SetRFWKPClockSource>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_RCC_SetSMPSClockSource>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_RCC_SetSMPSPrescaler>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002106:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4313      	orrs	r3, r2
 800210e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_RCC_SetUSARTClockSource>:
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f023 0203 	bic.w	r2, r3, #3
 8002130:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_RCC_SetLPUARTClockSource>:
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002158:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800215c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_RCC_SetI2CClockSource>:
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002180:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800218c:	43db      	mvns	r3, r3
 800218e:	401a      	ands	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002198:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_RCC_SetLPTIMClockSource>:
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <LL_RCC_SetSAIClockSource>:
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LL_RCC_SetRNGClockSource>:
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002222:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_RCC_SetCLK48ClockSource>:
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800224e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_RCC_SetUSBClockSource>:
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffe3 	bl	800223a <LL_RCC_SetCLK48ClockSource>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <LL_RCC_SetADCClockSource>:
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002290:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_RCC_SetRTCClockSource>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80022b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_RCC_GetRTCClockSource>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_RCC_ForceBackupDomainReset>:
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002302:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_RCC_PLLSAI1_Enable>:
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002340:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002344:	6013      	str	r3, [r2, #0]
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_RCC_PLLSAI1_Disable>:
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800235e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_RCC_PLLSAI1_IsReady>:
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800237c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002380:	d101      	bne.n	8002386 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b088      	sub	sp, #32
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800239a:	2300      	movs	r3, #0
 800239c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800239e:	2300      	movs	r3, #0
 80023a0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d034      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023b6:	d021      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80023b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80023bc:	d81b      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023c2:	d01d      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80023c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023c8:	d815      	bhi.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80023ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023d2:	d110      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80023e4:	e00d      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f947 	bl	800267e <RCCEx_PLLSAI1_ConfigNP>
 80023f0:	4603      	mov	r3, r0
 80023f2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80023f4:	e005      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	77fb      	strb	r3, [r7, #31]
        break;
 80023fa:	e002      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80023fc:	bf00      	nop
 80023fe:	e000      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002402:	7ffb      	ldrb	r3, [r7, #31]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fee8 	bl	80021e2 <LL_RCC_SetSAIClockSource>
 8002412:	e001      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002414:	7ffb      	ldrb	r3, [r7, #31]
 8002416:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002420:	2b00      	cmp	r3, #0
 8002422:	d046      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002424:	f7ff ff56 	bl	80022d4 <LL_RCC_GetRTCClockSource>
 8002428:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	429a      	cmp	r2, r3
 8002432:	d03c      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002434:	f7fe fcaa 	bl	8000d8c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff30 	bl	80022a8 <LL_RCC_SetRTCClockSource>
 8002448:	e02e      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800244a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002452:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002454:	f7ff ff4b 	bl	80022ee <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002458:	f7ff ff5a 	bl	8002310 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800246a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002474:	f7ff fdf0 	bl	8002058 <LL_RCC_LSE_IsEnabled>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d114      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800247e:	f7fe f8bb 	bl	80005f8 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002484:	e00b      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002486:	f7fe f8b7 	bl	80005f8 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002494:	4293      	cmp	r3, r2
 8002496:	d902      	bls.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	77fb      	strb	r3, [r7, #31]
              break;
 800249c:	e004      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800249e:	f7ff fded 	bl	800207c <LL_RCC_LSE_IsReady>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d1ee      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80024a8:	7ffb      	ldrb	r3, [r7, #31]
 80024aa:	77bb      	strb	r3, [r7, #30]
 80024ac:	e001      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ae:	7ffb      	ldrb	r3, [r7, #31]
 80024b0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fe2a 	bl	800211c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d004      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fe35 	bl	8002148 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fe5d 	bl	80021ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fe52 	bl	80021ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fe2a 	bl	8002174 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fe1f 	bl	8002174 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d022      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fe8d 	bl	8002266 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002550:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002554:	d107      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002556:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002560:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002564:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800256e:	d10b      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4618      	mov	r0, r3
 8002576:	f000 f8dd 	bl	8002734 <RCCEx_PLLSAI1_ConfigNQ>
 800257a:	4603      	mov	r3, r0
 800257c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002584:	7ffb      	ldrb	r3, [r7, #31]
 8002586:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002590:	2b00      	cmp	r3, #0
 8002592:	d02b      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800259c:	d008      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025a6:	d003      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fe2a 	bl	800220e <LL_RCC_SetRNGClockSource>
 80025ba:	e00a      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7ff fe21 	bl	800220e <LL_RCC_SetRNGClockSource>
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f7ff fe34 	bl	800223a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80025da:	d107      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80025dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d022      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe3d 	bl	800227c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800260a:	d107      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002624:	d10b      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f8dd 	bl	80027ea <RCCEx_PLLSAI1_ConfigNR>
 8002630:	4603      	mov	r3, r0
 8002632:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002634:	7ffb      	ldrb	r3, [r7, #31]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800263a:	7ffb      	ldrb	r3, [r7, #31]
 800263c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fd26 	bl	80020a0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fd45 	bl	80020f4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fd2c 	bl	80020cc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002674:	7fbb      	ldrb	r3, [r7, #30]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800268a:	f7ff fe61 	bl	8002350 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800268e:	f7fd ffb3 	bl	80005f8 <HAL_GetTick>
 8002692:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002694:	e009      	b.n	80026aa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002696:	f7fd ffaf 	bl	80005f8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d902      	bls.n	80026aa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	73fb      	strb	r3, [r7, #15]
      break;
 80026a8:	e004      	b.n	80026b4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80026aa:	f7ff fe60 	bl	800236e <LL_RCC_PLLSAI1_IsReady>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d137      	bne.n	800272a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026ce:	4313      	orrs	r3, r2
 80026d0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026e4:	4313      	orrs	r3, r2
 80026e6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80026e8:	f7ff fe23 	bl	8002332 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ec:	f7fd ff84 	bl	80005f8 <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80026f2:	e009      	b.n	8002708 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026f4:	f7fd ff80 	bl	80005f8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	73fb      	strb	r3, [r7, #15]
        break;
 8002706:	e004      	b.n	8002712 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002708:	f7ff fe31 	bl	800236e <LL_RCC_PLLSAI1_IsReady>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d1f0      	bne.n	80026f4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d108      	bne.n	800272a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002726:	4313      	orrs	r3, r2
 8002728:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002740:	f7ff fe06 	bl	8002350 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002744:	f7fd ff58 	bl	80005f8 <HAL_GetTick>
 8002748:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800274a:	e009      	b.n	8002760 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800274c:	f7fd ff54 	bl	80005f8 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	73fb      	strb	r3, [r7, #15]
      break;
 800275e:	e004      	b.n	800276a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002760:	f7ff fe05 	bl	800236e <LL_RCC_PLLSAI1_IsReady>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d137      	bne.n	80027e0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002784:	4313      	orrs	r3, r2
 8002786:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800279a:	4313      	orrs	r3, r2
 800279c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800279e:	f7ff fdc8 	bl	8002332 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a2:	f7fd ff29 	bl	80005f8 <HAL_GetTick>
 80027a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027a8:	e009      	b.n	80027be <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027aa:	f7fd ff25 	bl	80005f8 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d902      	bls.n	80027be <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	73fb      	strb	r3, [r7, #15]
        break;
 80027bc:	e004      	b.n	80027c8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027be:	f7ff fdd6 	bl	800236e <LL_RCC_PLLSAI1_IsReady>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d1f0      	bne.n	80027aa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d108      	bne.n	80027e0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80027ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027dc:	4313      	orrs	r3, r2
 80027de:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80027f6:	f7ff fdab 	bl	8002350 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027fa:	f7fd fefd 	bl	80005f8 <HAL_GetTick>
 80027fe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002800:	e009      	b.n	8002816 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002802:	f7fd fef9 	bl	80005f8 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d902      	bls.n	8002816 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e004      	b.n	8002820 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002816:	f7ff fdaa 	bl	800236e <LL_RCC_PLLSAI1_IsReady>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f0      	bne.n	8002802 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d137      	bne.n	8002896 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800283a:	4313      	orrs	r3, r2
 800283c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800283e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002850:	4313      	orrs	r3, r2
 8002852:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002854:	f7ff fd6d 	bl	8002332 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fd fece 	bl	80005f8 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800285e:	e009      	b.n	8002874 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002860:	f7fd feca 	bl	80005f8 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	73fb      	strb	r3, [r7, #15]
        break;
 8002872:	e004      	b.n	800287e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002874:	f7ff fd7b 	bl	800236e <LL_RCC_PLLSAI1_IsReady>
 8002878:	4603      	mov	r3, r0
 800287a:	2b01      	cmp	r3, #1
 800287c:	d1f0      	bne.n	8002860 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d108      	bne.n	8002896 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002892:	4313      	orrs	r3, r2
 8002894:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <memset>:
 80028a0:	4402      	add	r2, r0
 80028a2:	4603      	mov	r3, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <__libc_init_array>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	4d0d      	ldr	r5, [pc, #52]	@ (80028e8 <__libc_init_array+0x38>)
 80028b4:	4c0d      	ldr	r4, [pc, #52]	@ (80028ec <__libc_init_array+0x3c>)
 80028b6:	1b64      	subs	r4, r4, r5
 80028b8:	10a4      	asrs	r4, r4, #2
 80028ba:	2600      	movs	r6, #0
 80028bc:	42a6      	cmp	r6, r4
 80028be:	d109      	bne.n	80028d4 <__libc_init_array+0x24>
 80028c0:	4d0b      	ldr	r5, [pc, #44]	@ (80028f0 <__libc_init_array+0x40>)
 80028c2:	4c0c      	ldr	r4, [pc, #48]	@ (80028f4 <__libc_init_array+0x44>)
 80028c4:	f000 f818 	bl	80028f8 <_init>
 80028c8:	1b64      	subs	r4, r4, r5
 80028ca:	10a4      	asrs	r4, r4, #2
 80028cc:	2600      	movs	r6, #0
 80028ce:	42a6      	cmp	r6, r4
 80028d0:	d105      	bne.n	80028de <__libc_init_array+0x2e>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d8:	4798      	blx	r3
 80028da:	3601      	adds	r6, #1
 80028dc:	e7ee      	b.n	80028bc <__libc_init_array+0xc>
 80028de:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e2:	4798      	blx	r3
 80028e4:	3601      	adds	r6, #1
 80028e6:	e7f2      	b.n	80028ce <__libc_init_array+0x1e>
 80028e8:	080029bc 	.word	0x080029bc
 80028ec:	080029bc 	.word	0x080029bc
 80028f0:	080029bc 	.word	0x080029bc
 80028f4:	080029c0 	.word	0x080029c0

080028f8 <_init>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr

08002904 <_fini>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr
